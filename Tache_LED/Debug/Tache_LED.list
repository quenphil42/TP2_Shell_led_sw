
Tache_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005bcc  08005bcc  00015bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cb0  08005cb0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005cb0  08005cb0  00015cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cb8  08005cb8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cb8  08005cb8  00015cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cbc  08005cbc  00015cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004068  20000074  08005d34  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040dc  08005d34  000240dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fade  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002771  00000000  00000000  0002fb82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  000322f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  00032fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027dfc  00000000  00000000  00033b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f918  00000000  00000000  0005b93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f19e6  00000000  00000000  0006b254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015cc3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038cc  00000000  00000000  0015cc8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005bb4 	.word	0x08005bb4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005bb4 	.word	0x08005bb4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetIdleTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetIdleTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000090 	.word	0x20000090
 8000544:	200000e4 	.word	0x200000e4

08000548 <__io_putchar>:
SemaphoreHandle_t semaphori;

TaskHandle_t xHandleLED = NULL;

int __io_putchar(int ch)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000550:	1d39      	adds	r1, r7, #4
 8000552:	f04f 33ff 	mov.w	r3, #4294967295
 8000556:	2201      	movs	r2, #1
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <__io_putchar+0x20>)
 800055a:	f002 fb7d 	bl	8002c58 <HAL_UART_Transmit>
	return ch;
 800055e:	687b      	ldr	r3, [r7, #4]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200002e4 	.word	0x200002e4

0800056c <ledtest>:

int ledtest(void){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	while (1){
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000570:	2102      	movs	r1, #2
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <ledtest+0x18>)
 8000574:	f001 fa8d 	bl	8001a92 <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 8000578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057c:	f003 fe58 	bl	8004230 <vTaskDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000580:	e7f6      	b.n	8000570 <ledtest+0x4>
 8000582:	bf00      	nop
 8000584:	40022000 	.word	0x40022000

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 feba 	bl	8001306 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f843 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f8d9 	bl	800074c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f8a7 	bl	80006ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  xReturned = xTaskCreate(
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <main+0x74>)
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2302      	movs	r3, #2
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	f242 7310 	movw	r3, #10000	; 0x2710
 80005aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005ae:	4914      	ldr	r1, [pc, #80]	; (8000600 <main+0x78>)
 80005b0:	4814      	ldr	r0, [pc, #80]	; (8000604 <main+0x7c>)
 80005b2:	f003 fd04 	bl	8003fbe <xTaskCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a13      	ldr	r2, [pc, #76]	; (8000608 <main+0x80>)
 80005ba:	6013      	str	r3, [r2, #0]

  /*if (xReturned == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY)
      {
	  	  printf("Error LED Task Create\r\n");
      }*/
  if(xReturned == pdTRUE)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <main+0x80>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d103      	bne.n	80005cc <main+0x44>
  {
	  printf("Led task created \r\n");
 80005c4:	4811      	ldr	r0, [pc, #68]	; (800060c <main+0x84>)
 80005c6:	f004 fe65 	bl	8005294 <puts>
 80005ca:	e002      	b.n	80005d2 <main+0x4a>
  }
  else
  {
	  printf("Error Led task not created \r\n");
 80005cc:	4810      	ldr	r0, [pc, #64]	; (8000610 <main+0x88>)
 80005ce:	f004 fe61 	bl	8005294 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <main+0x8c>)
 80005d4:	1d3c      	adds	r4, r7, #4
 80005d6:	461d      	mov	r5, r3
 80005d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 fb71 	bl	8003cd0 <osThreadCreate>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a09      	ldr	r2, [pc, #36]	; (8000618 <main+0x90>)
 80005f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f4:	f003 fb65 	bl	8003cc2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0x70>
 80005fa:	bf00      	nop
 80005fc:	20000374 	.word	0x20000374
 8000600:	08005bd8 	.word	0x08005bd8
 8000604:	0800056d 	.word	0x0800056d
 8000608:	20000370 	.word	0x20000370
 800060c:	08005bdc 	.word	0x08005bdc
 8000610:	08005bf0 	.word	0x08005bf0
 8000614:	08005c10 	.word	0x08005c10
 8000618:	2000036c 	.word	0x2000036c

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fdbc 	bl	80051a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xc8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <SystemClock_Config+0xc8>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemClock_Config+0xc8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemClock_Config+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xcc>)
 8000662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xcc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000688:	230a      	movs	r3, #10
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 800068c:	23d2      	movs	r3, #210	; 0xd2
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fa13 	bl	8001ac8 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006a8:	f000 fc68 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2105      	movs	r1, #5
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fca0 	bl	8002010 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006d6:	f000 fc51 	bl	8000f7c <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USART1_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	; (8000748 <MX_USART1_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USART1_UART_Init+0x58>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART1_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART1_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART1_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000730:	f002 fa44 	bl	8002bbc <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 fc1f 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200002e4 	.word	0x200002e4
 8000748:	40011000 	.word	0x40011000

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b090      	sub	sp, #64	; 0x40
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000762:	4bad      	ldr	r3, [pc, #692]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4aac      	ldr	r2, [pc, #688]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000768:	f043 0310 	orr.w	r3, r3, #16
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4baa      	ldr	r3, [pc, #680]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0310 	and.w	r3, r3, #16
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
 8000778:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800077a:	4ba7      	ldr	r3, [pc, #668]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4aa6      	ldr	r2, [pc, #664]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4ba4      	ldr	r3, [pc, #656]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
 8000790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4ba1      	ldr	r3, [pc, #644]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4aa0      	ldr	r2, [pc, #640]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b9e      	ldr	r3, [pc, #632]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
 80007a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	4b9b      	ldr	r3, [pc, #620]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a9a      	ldr	r2, [pc, #616]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b98      	ldr	r3, [pc, #608]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	61fb      	str	r3, [r7, #28]
 80007c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b95      	ldr	r3, [pc, #596]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a94      	ldr	r2, [pc, #592]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b92      	ldr	r3, [pc, #584]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b8f      	ldr	r3, [pc, #572]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a8e      	ldr	r2, [pc, #568]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b8c      	ldr	r3, [pc, #560]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007f2:	4b89      	ldr	r3, [pc, #548]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a88      	ldr	r2, [pc, #544]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 80007f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b86      	ldr	r3, [pc, #536]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800080a:	4b83      	ldr	r3, [pc, #524]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a82      	ldr	r2, [pc, #520]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b80      	ldr	r3, [pc, #512]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000822:	4b7d      	ldr	r3, [pc, #500]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a7c      	ldr	r2, [pc, #496]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000828:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b7a      	ldr	r3, [pc, #488]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083a:	4b77      	ldr	r3, [pc, #476]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a76      	ldr	r2, [pc, #472]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b74      	ldr	r3, [pc, #464]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0320 	and.w	r3, r3, #32
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	4b71      	ldr	r3, [pc, #452]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a70      	ldr	r2, [pc, #448]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b6e      	ldr	r3, [pc, #440]	; (8000a18 <MX_GPIO_Init+0x2cc>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	210e      	movs	r1, #14
 800086e:	486b      	ldr	r0, [pc, #428]	; (8000a1c <MX_GPIO_Init+0x2d0>)
 8000870:	f001 f8f6 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	2108      	movs	r1, #8
 8000878:	4869      	ldr	r0, [pc, #420]	; (8000a20 <MX_GPIO_Init+0x2d4>)
 800087a:	f001 f8f1 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000884:	4867      	ldr	r0, [pc, #412]	; (8000a24 <MX_GPIO_Init+0x2d8>)
 8000886:	f001 f8eb 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	21c8      	movs	r1, #200	; 0xc8
 800088e:	4866      	ldr	r0, [pc, #408]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 8000890:	f001 f8e6 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000894:	2310      	movs	r3, #16
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008a4:	230e      	movs	r3, #14
 80008a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ac:	4619      	mov	r1, r3
 80008ae:	485f      	ldr	r0, [pc, #380]	; (8000a2c <MX_GPIO_Init+0x2e0>)
 80008b0:	f000 ff2a 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80008b4:	2304      	movs	r3, #4
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80008c4:	2309      	movs	r3, #9
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008cc:	4619      	mov	r1, r3
 80008ce:	4857      	ldr	r0, [pc, #348]	; (8000a2c <MX_GPIO_Init+0x2e0>)
 80008d0:	f000 ff1a 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80008d4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e6:	230b      	movs	r3, #11
 80008e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ee:	4619      	mov	r1, r3
 80008f0:	484d      	ldr	r0, [pc, #308]	; (8000a28 <MX_GPIO_Init+0x2dc>)
 80008f2:	f000 ff09 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80008f6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000908:	230c      	movs	r3, #12
 800090a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800090c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000910:	4619      	mov	r1, r3
 8000912:	4846      	ldr	r0, [pc, #280]	; (8000a2c <MX_GPIO_Init+0x2e0>)
 8000914:	f000 fef8 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000918:	f44f 7340 	mov.w	r3, #768	; 0x300
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091e:	2312      	movs	r3, #18
 8000920:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800092a:	2304      	movs	r3, #4
 800092c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000932:	4619      	mov	r1, r3
 8000934:	483e      	ldr	r0, [pc, #248]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000936:	f000 fee7 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800093a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800094c:	230a      	movs	r3, #10
 800094e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000954:	4619      	mov	r1, r3
 8000956:	4836      	ldr	r0, [pc, #216]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000958:	f000 fed6 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800095c:	2310      	movs	r3, #16
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800096c:	2302      	movs	r3, #2
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000974:	4619      	mov	r1, r3
 8000976:	482e      	ldr	r0, [pc, #184]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000978:	f000 fec6 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800098c:	2308      	movs	r3, #8
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000994:	4619      	mov	r1, r3
 8000996:	4827      	ldr	r0, [pc, #156]	; (8000a34 <MX_GPIO_Init+0x2e8>)
 8000998:	f000 feb6 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800099c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009aa:	2303      	movs	r3, #3
 80009ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009ae:	230c      	movs	r3, #12
 80009b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b6:	4619      	mov	r1, r3
 80009b8:	481f      	ldr	r0, [pc, #124]	; (8000a38 <MX_GPIO_Init+0x2ec>)
 80009ba:	f000 fea5 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80009be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009d0:	2301      	movs	r3, #1
 80009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d8:	4619      	mov	r1, r3
 80009da:	4818      	ldr	r0, [pc, #96]	; (8000a3c <MX_GPIO_Init+0x2f0>)
 80009dc:	f000 fe94 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80009e0:	2360      	movs	r3, #96	; 0x60
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80009f0:	230d      	movs	r3, #13
 80009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f8:	4619      	mov	r1, r3
 80009fa:	480c      	ldr	r0, [pc, #48]	; (8000a2c <MX_GPIO_Init+0x2e0>)
 80009fc:	f000 fe84 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000a00:	2340      	movs	r3, #64	; 0x40
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a10:	230a      	movs	r3, #10
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a14:	e014      	b.n	8000a40 <MX_GPIO_Init+0x2f4>
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40022000 	.word	0x40022000
 8000a20:	40022800 	.word	0x40022800
 8000a24:	40021c00 	.word	0x40021c00
 8000a28:	40021800 	.word	0x40021800
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40020400 	.word	0x40020400
 8000a34:	40020c00 	.word	0x40020c00
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020000 	.word	0x40020000
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a44:	4619      	mov	r1, r3
 8000a46:	48bc      	ldr	r0, [pc, #752]	; (8000d38 <MX_GPIO_Init+0x5ec>)
 8000a48:	f000 fe5e 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a4c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a5e:	230c      	movs	r3, #12
 8000a60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a66:	4619      	mov	r1, r3
 8000a68:	48b4      	ldr	r0, [pc, #720]	; (8000d3c <MX_GPIO_Init+0x5f0>)
 8000a6a:	f000 fe4d 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000a6e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a80:	230e      	movs	r3, #14
 8000a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a88:	4619      	mov	r1, r3
 8000a8a:	48ad      	ldr	r0, [pc, #692]	; (8000d40 <MX_GPIO_Init+0x5f4>)
 8000a8c:	f000 fe3c 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a90:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aaa:	4619      	mov	r1, r3
 8000aac:	48a5      	ldr	r0, [pc, #660]	; (8000d44 <MX_GPIO_Init+0x5f8>)
 8000aae:	f000 fe2b 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000ab2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ac4:	230a      	movs	r3, #10
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000acc:	4619      	mov	r1, r3
 8000ace:	489e      	ldr	r0, [pc, #632]	; (8000d48 <MX_GPIO_Init+0x5fc>)
 8000ad0:	f000 fe1a 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000ad4:	23f0      	movs	r3, #240	; 0xf0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000ae4:	230a      	movs	r3, #10
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aec:	4619      	mov	r1, r3
 8000aee:	4897      	ldr	r0, [pc, #604]	; (8000d4c <MX_GPIO_Init+0x600>)
 8000af0:	f000 fe0a 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000af4:	23f7      	movs	r3, #247	; 0xf7
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b04:	230e      	movs	r3, #14
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4890      	ldr	r0, [pc, #576]	; (8000d50 <MX_GPIO_Init+0x604>)
 8000b10:	f000 fdfa 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b26:	2309      	movs	r3, #9
 8000b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4882      	ldr	r0, [pc, #520]	; (8000d3c <MX_GPIO_Init+0x5f0>)
 8000b32:	f000 fde9 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000b48:	230a      	movs	r3, #10
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b50:	4619      	mov	r1, r3
 8000b52:	487a      	ldr	r0, [pc, #488]	; (8000d3c <MX_GPIO_Init+0x5f0>)
 8000b54:	f000 fdd8 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000b58:	2308      	movs	r3, #8
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b68:	230d      	movs	r3, #13
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b70:	4619      	mov	r1, r3
 8000b72:	4874      	ldr	r0, [pc, #464]	; (8000d44 <MX_GPIO_Init+0x5f8>)
 8000b74:	f000 fdc8 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LED_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin;
 8000b78:	230e      	movs	r3, #14
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	486f      	ldr	r0, [pc, #444]	; (8000d4c <MX_GPIO_Init+0x600>)
 8000b90:	f000 fdba 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b94:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4868      	ldr	r0, [pc, #416]	; (8000d54 <MX_GPIO_Init+0x608>)
 8000bb2:	f000 fda9 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000bb6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bc8:	230e      	movs	r3, #14
 8000bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	485e      	ldr	r0, [pc, #376]	; (8000d4c <MX_GPIO_Init+0x600>)
 8000bd4:	f000 fd98 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bec:	4619      	mov	r1, r3
 8000bee:	4858      	ldr	r0, [pc, #352]	; (8000d50 <MX_GPIO_Init+0x604>)
 8000bf0:	f000 fd8a 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c06:	230d      	movs	r3, #13
 8000c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0e:	4619      	mov	r1, r3
 8000c10:	484a      	ldr	r0, [pc, #296]	; (8000d3c <MX_GPIO_Init+0x5f0>)
 8000c12:	f000 fd79 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000c16:	2304      	movs	r3, #4
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c26:	230c      	movs	r3, #12
 8000c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4844      	ldr	r0, [pc, #272]	; (8000d44 <MX_GPIO_Init+0x5f8>)
 8000c32:	f000 fd69 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000c36:	f248 0304 	movw	r3, #32772	; 0x8004
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4843      	ldr	r0, [pc, #268]	; (8000d58 <MX_GPIO_Init+0x60c>)
 8000c4c:	f000 fd5c 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c66:	4619      	mov	r1, r3
 8000c68:	483b      	ldr	r0, [pc, #236]	; (8000d58 <MX_GPIO_Init+0x60c>)
 8000c6a:	f000 fd4d 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c6e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c80:	230d      	movs	r3, #13
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4833      	ldr	r0, [pc, #204]	; (8000d58 <MX_GPIO_Init+0x60c>)
 8000c8c:	f000 fd3c 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4828      	ldr	r0, [pc, #160]	; (8000d4c <MX_GPIO_Init+0x600>)
 8000cac:	f000 fd2c 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cca:	4619      	mov	r1, r3
 8000ccc:	481e      	ldr	r0, [pc, #120]	; (8000d48 <MX_GPIO_Init+0x5fc>)
 8000cce:	f000 fd1b 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000cd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cd8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4818      	ldr	r0, [pc, #96]	; (8000d4c <MX_GPIO_Init+0x600>)
 8000cea:	f000 fd0d 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000cee:	23c0      	movs	r3, #192	; 0xc0
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cfe:	2308      	movs	r3, #8
 8000d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d06:	4619      	mov	r1, r3
 8000d08:	4814      	ldr	r0, [pc, #80]	; (8000d5c <MX_GPIO_Init+0x610>)
 8000d0a:	f000 fcfd 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d1e:	230a      	movs	r3, #10
 8000d20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d26:	4619      	mov	r1, r3
 8000d28:	480b      	ldr	r0, [pc, #44]	; (8000d58 <MX_GPIO_Init+0x60c>)
 8000d2a:	f000 fced 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d2e:	2328      	movs	r3, #40	; 0x28
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	e014      	b.n	8000d60 <MX_GPIO_Init+0x614>
 8000d36:	bf00      	nop
 8000d38:	40020400 	.word	0x40020400
 8000d3c:	40021800 	.word	0x40021800
 8000d40:	40022400 	.word	0x40022400
 8000d44:	40020c00 	.word	0x40020c00
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40022000 	.word	0x40022000
 8000d50:	40022800 	.word	0x40022800
 8000d54:	40021400 	.word	0x40021400
 8000d58:	40021c00 	.word	0x40021c00
 8000d5c:	40020800 	.word	0x40020800
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d72:	4619      	mov	r1, r3
 8000d74:	4876      	ldr	r0, [pc, #472]	; (8000f50 <MX_GPIO_Init+0x804>)
 8000d76:	f000 fcc7 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d7a:	23c8      	movs	r3, #200	; 0xc8
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4870      	ldr	r0, [pc, #448]	; (8000f54 <MX_GPIO_Init+0x808>)
 8000d92:	f000 fcb9 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d96:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000da4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da8:	4619      	mov	r1, r3
 8000daa:	486b      	ldr	r0, [pc, #428]	; (8000f58 <MX_GPIO_Init+0x80c>)
 8000dac:	f000 fcac 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000db0:	2308      	movs	r3, #8
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4864      	ldr	r0, [pc, #400]	; (8000f5c <MX_GPIO_Init+0x810>)
 8000dcc:	f000 fc9c 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000dd0:	2305      	movs	r3, #5
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000de0:	230a      	movs	r3, #10
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	485c      	ldr	r0, [pc, #368]	; (8000f5c <MX_GPIO_Init+0x810>)
 8000dec:	f000 fc8c 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000df0:	2332      	movs	r3, #50	; 0x32
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e00:	230b      	movs	r3, #11
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4854      	ldr	r0, [pc, #336]	; (8000f5c <MX_GPIO_Init+0x810>)
 8000e0c:	f000 fc7c 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e10:	2304      	movs	r3, #4
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e20:	2309      	movs	r3, #9
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	484d      	ldr	r0, [pc, #308]	; (8000f60 <MX_GPIO_Init+0x814>)
 8000e2c:	f000 fc6c 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e30:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e42:	2309      	movs	r3, #9
 8000e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4845      	ldr	r0, [pc, #276]	; (8000f64 <MX_GPIO_Init+0x818>)
 8000e4e:	f000 fc5b 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e52:	2304      	movs	r3, #4
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e62:	4619      	mov	r1, r3
 8000e64:	483b      	ldr	r0, [pc, #236]	; (8000f54 <MX_GPIO_Init+0x808>)
 8000e66:	f000 fc4f 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e6a:	2386      	movs	r3, #134	; 0x86
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e7a:	230b      	movs	r3, #11
 8000e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e82:	4619      	mov	r1, r3
 8000e84:	4838      	ldr	r0, [pc, #224]	; (8000f68 <MX_GPIO_Init+0x81c>)
 8000e86:	f000 fc3f 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4832      	ldr	r0, [pc, #200]	; (8000f68 <MX_GPIO_Init+0x81c>)
 8000e9e:	f000 fc33 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000ea2:	2350      	movs	r3, #80	; 0x50
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000eb2:	230d      	movs	r3, #13
 8000eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	482a      	ldr	r0, [pc, #168]	; (8000f68 <MX_GPIO_Init+0x81c>)
 8000ebe:	f000 fc23 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000ec2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec8:	2312      	movs	r3, #18
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ed8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000edc:	4619      	mov	r1, r3
 8000ede:	481c      	ldr	r0, [pc, #112]	; (8000f50 <MX_GPIO_Init+0x804>)
 8000ee0:	f000 fc12 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000ee4:	2328      	movs	r3, #40	; 0x28
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000efc:	4619      	mov	r1, r3
 8000efe:	481a      	ldr	r0, [pc, #104]	; (8000f68 <MX_GPIO_Init+0x81c>)
 8000f00:	f000 fc02 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000f04:	2340      	movs	r3, #64	; 0x40
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000f14:	2309      	movs	r3, #9
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480c      	ldr	r0, [pc, #48]	; (8000f50 <MX_GPIO_Init+0x804>)
 8000f20:	f000 fbf2 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000f24:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f36:	2305      	movs	r3, #5
 8000f38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4807      	ldr	r0, [pc, #28]	; (8000f60 <MX_GPIO_Init+0x814>)
 8000f42:	f000 fbe1 	bl	8001708 <HAL_GPIO_Init>

}
 8000f46:	bf00      	nop
 8000f48:	3740      	adds	r7, #64	; 0x40
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40021c00 	.word	0x40021c00
 8000f54:	40021800 	.word	0x40021800
 8000f58:	40021400 	.word	0x40021400
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40020c00 	.word	0x40020c00
 8000f68:	40020000 	.word	0x40020000

08000f6c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f002 fef7 	bl	8003d68 <osDelay>
 8000f7a:	e7fb      	b.n	8000f74 <StartDefaultTask+0x8>

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <Error_Handler+0x8>
	...

08000f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	210f      	movs	r1, #15
 8000fc2:	f06f 0001 	mvn.w	r0, #1
 8000fc6:	f000 fad6 	bl	8001576 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0ac      	sub	sp, #176	; 0xb0
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff0:	f107 0318 	add.w	r3, r7, #24
 8000ff4:	2284      	movs	r2, #132	; 0x84
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f004 f8d5 	bl	80051a8 <memset>
  if(huart->Instance==USART1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a36      	ldr	r2, [pc, #216]	; (80010dc <HAL_UART_MspInit+0x104>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d164      	bne.n	80010d2 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001008:	2340      	movs	r3, #64	; 0x40
 800100a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800100c:	2300      	movs	r3, #0
 800100e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001010:	f107 0318 	add.w	r3, r7, #24
 8001014:	4618      	mov	r0, r3
 8001016:	f001 f9e1 	bl	80023dc <HAL_RCCEx_PeriphCLKConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001020:	f7ff ffac 	bl	8000f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001024:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <HAL_UART_MspInit+0x108>)
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001028:	4a2d      	ldr	r2, [pc, #180]	; (80010e0 <HAL_UART_MspInit+0x108>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	6453      	str	r3, [r2, #68]	; 0x44
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_UART_MspInit+0x108>)
 8001032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001034:	f003 0310 	and.w	r3, r3, #16
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <HAL_UART_MspInit+0x108>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	4a27      	ldr	r2, [pc, #156]	; (80010e0 <HAL_UART_MspInit+0x108>)
 8001042:	f043 0302 	orr.w	r3, r3, #2
 8001046:	6313      	str	r3, [r2, #48]	; 0x30
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <HAL_UART_MspInit+0x108>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_UART_MspInit+0x108>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <HAL_UART_MspInit+0x108>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6313      	str	r3, [r2, #48]	; 0x30
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <HAL_UART_MspInit+0x108>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001084:	2307      	movs	r3, #7
 8001086:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800108e:	4619      	mov	r1, r3
 8001090:	4814      	ldr	r0, [pc, #80]	; (80010e4 <HAL_UART_MspInit+0x10c>)
 8001092:	f000 fb39 	bl	8001708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800109a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b0:	2307      	movs	r3, #7
 80010b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010ba:	4619      	mov	r1, r3
 80010bc:	480a      	ldr	r0, [pc, #40]	; (80010e8 <HAL_UART_MspInit+0x110>)
 80010be:	f000 fb23 	bl	8001708 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2105      	movs	r1, #5
 80010c6:	2025      	movs	r0, #37	; 0x25
 80010c8:	f000 fa55 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010cc:	2025      	movs	r0, #37	; 0x25
 80010ce:	f000 fa6e 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010d2:	bf00      	nop
 80010d4:	37b0      	adds	r7, #176	; 0xb0
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40011000 	.word	0x40011000
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40020000 	.word	0x40020000

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <NMI_Handler+0x4>

080010f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <MemManage_Handler+0x4>

080010fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <BusFault_Handler+0x4>

08001104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <UsageFault_Handler+0x4>

0800110a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111c:	f000 f930 	bl	8001380 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001120:	f003 fbbc 	bl	800489c <xTaskGetSchedulerState>
 8001124:	4603      	mov	r3, r0
 8001126:	2b01      	cmp	r3, #1
 8001128:	d001      	beq.n	800112e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800112a:	f003 fddd 	bl	8004ce8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <USART1_IRQHandler+0x10>)
 800113a:	f001 fe11 	bl	8002d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200002e4 	.word	0x200002e4

08001148 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	e00a      	b.n	8001170 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800115a:	f3af 8000 	nop.w
 800115e:	4601      	mov	r1, r0
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	60ba      	str	r2, [r7, #8]
 8001166:	b2ca      	uxtb	r2, r1
 8001168:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3301      	adds	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	429a      	cmp	r2, r3
 8001176:	dbf0      	blt.n	800115a <_read+0x12>
	}

return len;
 8001178:	687b      	ldr	r3, [r7, #4]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	e009      	b.n	80011a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	60ba      	str	r2, [r7, #8]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9d3 	bl	8000548 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3301      	adds	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	dbf1      	blt.n	8001194 <_write+0x12>
	}
	return len;
 80011b0:	687b      	ldr	r3, [r7, #4]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_close>:

int _close(int file)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	return -1;
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011e2:	605a      	str	r2, [r3, #4]
	return 0;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <_isatty>:

int _isatty(int file)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
	return 1;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
	return 0;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800122c:	4a14      	ldr	r2, [pc, #80]	; (8001280 <_sbrk+0x5c>)
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <_sbrk+0x60>)
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <_sbrk+0x64>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <_sbrk+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001254:	f003 ff7e 	bl	8005154 <__errno>
 8001258:	4603      	mov	r3, r0
 800125a:	220c      	movs	r2, #12
 800125c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	e009      	b.n	8001278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <_sbrk+0x64>)
 8001274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20050000 	.word	0x20050000
 8001284:	00000400 	.word	0x00000400
 8001288:	20000378 	.word	0x20000378
 800128c:	200040e0 	.word	0x200040e0

08001290 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <SystemInit+0x20>)
 8001296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <SystemInit+0x20>)
 800129c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b8:	480d      	ldr	r0, [pc, #52]	; (80012f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ba:	490e      	ldr	r1, [pc, #56]	; (80012f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012bc:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012d0:	4c0b      	ldr	r4, [pc, #44]	; (8001300 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012de:	f7ff ffd7 	bl	8001290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e2:	f003 ff3d 	bl	8005160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e6:	f7ff f94f 	bl	8000588 <main>
  bx  lr    
 80012ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012ec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012f8:	08005cc0 	.word	0x08005cc0
  ldr r2, =_sbss
 80012fc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001300:	200040dc 	.word	0x200040dc

08001304 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC_IRQHandler>

08001306 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130a:	2003      	movs	r0, #3
 800130c:	f000 f928 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001310:	200f      	movs	r0, #15
 8001312:	f000 f805 	bl	8001320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001316:	f7ff fe37 	bl	8000f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x54>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x58>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f943 	bl	80015ca <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 f90b 	bl	8001576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <HAL_InitTick+0x5c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000000 	.word	0x20000000
 8001378:	20000008 	.word	0x20000008
 800137c:	20000004 	.word	0x20000004

08001380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x20>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x24>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <HAL_IncTick+0x24>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000008 	.word	0x20000008
 80013a4:	2000037c 	.word	0x2000037c

080013a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <HAL_GetTick+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	2000037c 	.word	0x2000037c

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <__NVIC_SetPriorityGrouping+0x40>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ee:	4a04      	ldr	r2, [pc, #16]	; (8001400 <__NVIC_SetPriorityGrouping+0x40>)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	60d3      	str	r3, [r2, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00
 8001404:	05fa0000 	.word	0x05fa0000

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <__NVIC_EnableIRQ+0x38>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f7ff ff8e 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff29 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff3e 	bl	8001408 <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff8e 	bl	80014b4 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5d 	bl	8001460 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff31 	bl	8001424 <__NVIC_EnableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa2 	bl	800151c <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff feda 	bl	80013a8 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d008      	beq.n	8001614 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e052      	b.n	80016ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0216 	bic.w	r2, r2, #22
 8001622:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001632:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	2b00      	cmp	r3, #0
 800163a:	d103      	bne.n	8001644 <HAL_DMA_Abort+0x62>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001640:	2b00      	cmp	r3, #0
 8001642:	d007      	beq.n	8001654 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0208 	bic.w	r2, r2, #8
 8001652:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001664:	e013      	b.n	800168e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001666:	f7ff fe9f 	bl	80013a8 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b05      	cmp	r3, #5
 8001672:	d90c      	bls.n	800168e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2220      	movs	r2, #32
 8001678:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2203      	movs	r2, #3
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e015      	b.n	80016ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1e4      	bne.n	8001666 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a0:	223f      	movs	r2, #63	; 0x3f
 80016a2:	409a      	lsls	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d004      	beq.n	80016e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e00c      	b.n	80016fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2205      	movs	r2, #5
 80016e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0201 	bic.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	e175      	b.n	8001a14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001728:	2201      	movs	r2, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	429a      	cmp	r2, r3
 8001742:	f040 8164 	bne.w	8001a0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d005      	beq.n	800175e <HAL_GPIO_Init+0x56>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d130      	bne.n	80017c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 0201 	and.w	r2, r3, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d017      	beq.n	80017fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d123      	bne.n	8001850 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80be 	beq.w	8001a0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	4b66      	ldr	r3, [pc, #408]	; (8001a2c <HAL_GPIO_Init+0x324>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	4a65      	ldr	r2, [pc, #404]	; (8001a2c <HAL_GPIO_Init+0x324>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189c:	6453      	str	r3, [r2, #68]	; 0x44
 800189e:	4b63      	ldr	r3, [pc, #396]	; (8001a2c <HAL_GPIO_Init+0x324>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018aa:	4a61      	ldr	r2, [pc, #388]	; (8001a30 <HAL_GPIO_Init+0x328>)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	220f      	movs	r2, #15
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a58      	ldr	r2, [pc, #352]	; (8001a34 <HAL_GPIO_Init+0x32c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d037      	beq.n	8001946 <HAL_GPIO_Init+0x23e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a57      	ldr	r2, [pc, #348]	; (8001a38 <HAL_GPIO_Init+0x330>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d031      	beq.n	8001942 <HAL_GPIO_Init+0x23a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a56      	ldr	r2, [pc, #344]	; (8001a3c <HAL_GPIO_Init+0x334>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d02b      	beq.n	800193e <HAL_GPIO_Init+0x236>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a55      	ldr	r2, [pc, #340]	; (8001a40 <HAL_GPIO_Init+0x338>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d025      	beq.n	800193a <HAL_GPIO_Init+0x232>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a54      	ldr	r2, [pc, #336]	; (8001a44 <HAL_GPIO_Init+0x33c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01f      	beq.n	8001936 <HAL_GPIO_Init+0x22e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a53      	ldr	r2, [pc, #332]	; (8001a48 <HAL_GPIO_Init+0x340>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d019      	beq.n	8001932 <HAL_GPIO_Init+0x22a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a52      	ldr	r2, [pc, #328]	; (8001a4c <HAL_GPIO_Init+0x344>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0x226>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a51      	ldr	r2, [pc, #324]	; (8001a50 <HAL_GPIO_Init+0x348>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d00d      	beq.n	800192a <HAL_GPIO_Init+0x222>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a50      	ldr	r2, [pc, #320]	; (8001a54 <HAL_GPIO_Init+0x34c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d007      	beq.n	8001926 <HAL_GPIO_Init+0x21e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4f      	ldr	r2, [pc, #316]	; (8001a58 <HAL_GPIO_Init+0x350>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_GPIO_Init+0x21a>
 800191e:	2309      	movs	r3, #9
 8001920:	e012      	b.n	8001948 <HAL_GPIO_Init+0x240>
 8001922:	230a      	movs	r3, #10
 8001924:	e010      	b.n	8001948 <HAL_GPIO_Init+0x240>
 8001926:	2308      	movs	r3, #8
 8001928:	e00e      	b.n	8001948 <HAL_GPIO_Init+0x240>
 800192a:	2307      	movs	r3, #7
 800192c:	e00c      	b.n	8001948 <HAL_GPIO_Init+0x240>
 800192e:	2306      	movs	r3, #6
 8001930:	e00a      	b.n	8001948 <HAL_GPIO_Init+0x240>
 8001932:	2305      	movs	r3, #5
 8001934:	e008      	b.n	8001948 <HAL_GPIO_Init+0x240>
 8001936:	2304      	movs	r3, #4
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x240>
 800193a:	2303      	movs	r3, #3
 800193c:	e004      	b.n	8001948 <HAL_GPIO_Init+0x240>
 800193e:	2302      	movs	r3, #2
 8001940:	e002      	b.n	8001948 <HAL_GPIO_Init+0x240>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_GPIO_Init+0x240>
 8001946:	2300      	movs	r3, #0
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	f002 0203 	and.w	r2, r2, #3
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4093      	lsls	r3, r2
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001958:	4935      	ldr	r1, [pc, #212]	; (8001a30 <HAL_GPIO_Init+0x328>)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <HAL_GPIO_Init+0x354>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800198a:	4a34      	ldr	r2, [pc, #208]	; (8001a5c <HAL_GPIO_Init+0x354>)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001990:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_GPIO_Init+0x354>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019b4:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <HAL_GPIO_Init+0x354>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_GPIO_Init+0x354>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019de:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <HAL_GPIO_Init+0x354>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <HAL_GPIO_Init+0x354>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a08:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <HAL_GPIO_Init+0x354>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3301      	adds	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	2b0f      	cmp	r3, #15
 8001a18:	f67f ae86 	bls.w	8001728 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40013800 	.word	0x40013800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40021400 	.word	0x40021400
 8001a4c:	40021800 	.word	0x40021800
 8001a50:	40021c00 	.word	0x40021c00
 8001a54:	40022000 	.word	0x40022000
 8001a58:	40022400 	.word	0x40022400
 8001a5c:	40013c00 	.word	0x40013c00

08001a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a70:	787b      	ldrb	r3, [r7, #1]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a7c:	e003      	b.n	8001a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a7e:	887b      	ldrh	r3, [r7, #2]
 8001a80:	041a      	lsls	r2, r3, #16
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	619a      	str	r2, [r3, #24]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aa4:	887a      	ldrh	r2, [r7, #2]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	041a      	lsls	r2, r3, #16
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	400b      	ands	r3, r1
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	619a      	str	r2, [r3, #24]
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e291      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8087 	beq.w	8001bfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aec:	4b96      	ldr	r3, [pc, #600]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d00c      	beq.n	8001b12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af8:	4b93      	ldr	r3, [pc, #588]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d112      	bne.n	8001b2a <HAL_RCC_OscConfig+0x62>
 8001b04:	4b90      	ldr	r3, [pc, #576]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b10:	d10b      	bne.n	8001b2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b12:	4b8d      	ldr	r3, [pc, #564]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d06c      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x130>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d168      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e26b      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x7a>
 8001b34:	4b84      	ldr	r3, [pc, #528]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a83      	ldr	r2, [pc, #524]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e02e      	b.n	8001ba0 <HAL_RCC_OscConfig+0xd8>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x9c>
 8001b4a:	4b7f      	ldr	r3, [pc, #508]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a7e      	ldr	r2, [pc, #504]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b7c      	ldr	r3, [pc, #496]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a7b      	ldr	r2, [pc, #492]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e01d      	b.n	8001ba0 <HAL_RCC_OscConfig+0xd8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0xc0>
 8001b6e:	4b76      	ldr	r3, [pc, #472]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a75      	ldr	r2, [pc, #468]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b73      	ldr	r3, [pc, #460]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a72      	ldr	r2, [pc, #456]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0xd8>
 8001b88:	4b6f      	ldr	r3, [pc, #444]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a6e      	ldr	r2, [pc, #440]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b6c      	ldr	r3, [pc, #432]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a6b      	ldr	r2, [pc, #428]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fbfe 	bl	80013a8 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fbfa 	bl	80013a8 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e21f      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	4b61      	ldr	r3, [pc, #388]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xe8>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fbea 	bl	80013a8 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fbe6 	bl	80013a8 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e20b      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x110>
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d069      	beq.n	8001cda <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c06:	4b50      	ldr	r3, [pc, #320]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00b      	beq.n	8001c2a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c12:	4b4d      	ldr	r3, [pc, #308]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d11c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x190>
 8001c1e:	4b4a      	ldr	r3, [pc, #296]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d116      	bne.n	8001c58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <HAL_RCC_OscConfig+0x17a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e1df      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	493d      	ldr	r1, [pc, #244]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c56:	e040      	b.n	8001cda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d023      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c60:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a38      	ldr	r2, [pc, #224]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fb9c 	bl	80013a8 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c74:	f7ff fb98 	bl	80013a8 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e1bd      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c92:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4929      	ldr	r1, [pc, #164]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]
 8001ca6:	e018      	b.n	8001cda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a26      	ldr	r2, [pc, #152]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fb78 	bl	80013a8 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fb74 	bl	80013a8 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e199      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d038      	beq.n	8001d58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d019      	beq.n	8001d22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf2:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff fb55 	bl	80013a8 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d02:	f7ff fb51 	bl	80013a8 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e176      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x23a>
 8001d20:	e01a      	b.n	8001d58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d26:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2e:	f7ff fb3b 	bl	80013a8 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d36:	f7ff fb37 	bl	80013a8 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d903      	bls.n	8001d4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e15c      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>
 8001d48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	4b91      	ldr	r3, [pc, #580]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1ee      	bne.n	8001d36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80a4 	beq.w	8001eae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d66:	4b8b      	ldr	r3, [pc, #556]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10d      	bne.n	8001d8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	4b88      	ldr	r3, [pc, #544]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a87      	ldr	r2, [pc, #540]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b85      	ldr	r3, [pc, #532]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8e:	4b82      	ldr	r3, [pc, #520]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d118      	bne.n	8001dcc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d9a:	4b7f      	ldr	r3, [pc, #508]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a7e      	ldr	r2, [pc, #504]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da6:	f7ff faff 	bl	80013a8 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dae:	f7ff fafb 	bl	80013a8 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b64      	cmp	r3, #100	; 0x64
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e120      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc0:	4b75      	ldr	r3, [pc, #468]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d106      	bne.n	8001de2 <HAL_RCC_OscConfig+0x31a>
 8001dd4:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	4a6e      	ldr	r2, [pc, #440]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6713      	str	r3, [r2, #112]	; 0x70
 8001de0:	e02d      	b.n	8001e3e <HAL_RCC_OscConfig+0x376>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x33c>
 8001dea:	4b6a      	ldr	r3, [pc, #424]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	4a69      	ldr	r2, [pc, #420]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6713      	str	r3, [r2, #112]	; 0x70
 8001df6:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	4a66      	ldr	r2, [pc, #408]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	6713      	str	r3, [r2, #112]	; 0x70
 8001e02:	e01c      	b.n	8001e3e <HAL_RCC_OscConfig+0x376>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b05      	cmp	r3, #5
 8001e0a:	d10c      	bne.n	8001e26 <HAL_RCC_OscConfig+0x35e>
 8001e0c:	4b61      	ldr	r3, [pc, #388]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e10:	4a60      	ldr	r2, [pc, #384]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	6713      	str	r3, [r2, #112]	; 0x70
 8001e18:	4b5e      	ldr	r3, [pc, #376]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	4a5d      	ldr	r2, [pc, #372]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
 8001e24:	e00b      	b.n	8001e3e <HAL_RCC_OscConfig+0x376>
 8001e26:	4b5b      	ldr	r3, [pc, #364]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2a:	4a5a      	ldr	r2, [pc, #360]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	6713      	str	r3, [r2, #112]	; 0x70
 8001e32:	4b58      	ldr	r3, [pc, #352]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a57      	ldr	r2, [pc, #348]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d015      	beq.n	8001e72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e46:	f7ff faaf 	bl	80013a8 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7ff faab 	bl	80013a8 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0ce      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	4b4b      	ldr	r3, [pc, #300]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0ee      	beq.n	8001e4e <HAL_RCC_OscConfig+0x386>
 8001e70:	e014      	b.n	8001e9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e72:	f7ff fa99 	bl	80013a8 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7ff fa95 	bl	80013a8 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0b8      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e90:	4b40      	ldr	r3, [pc, #256]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1ee      	bne.n	8001e7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d105      	bne.n	8001eae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a3b      	ldr	r2, [pc, #236]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 80a4 	beq.w	8002000 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d06b      	beq.n	8001f9c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d149      	bne.n	8001f60 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ecc:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a30      	ldr	r2, [pc, #192]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fa66 	bl	80013a8 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7ff fa62 	bl	80013a8 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e087      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef2:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	019b      	lsls	r3, r3, #6
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	085b      	lsrs	r3, r3, #1
 8001f16:	3b01      	subs	r3, #1
 8001f18:	041b      	lsls	r3, r3, #16
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	061b      	lsls	r3, r3, #24
 8001f22:	4313      	orrs	r3, r2
 8001f24:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001f26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f2a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff fa36 	bl	80013a8 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f40:	f7ff fa32 	bl	80013a8 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e057      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x478>
 8001f5e:	e04f      	b.n	8002000 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fa1c 	bl	80013a8 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f74:	f7ff fa18 	bl	80013a8 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e03d      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f86:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x4ac>
 8001f92:	e035      	b.n	8002000 <HAL_RCC_OscConfig+0x538>
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_RCC_OscConfig+0x544>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d028      	beq.n	8001ffc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d121      	bne.n	8001ffc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d11a      	bne.n	8001ffc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fcc:	4013      	ands	r3, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fd2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d111      	bne.n	8001ffc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	085b      	lsrs	r3, r3, #1
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800

08002010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0d0      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002028:	4b6a      	ldr	r3, [pc, #424]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d910      	bls.n	8002058 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b67      	ldr	r3, [pc, #412]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 020f 	bic.w	r2, r3, #15
 800203e:	4965      	ldr	r1, [pc, #404]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002046:	4b63      	ldr	r3, [pc, #396]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d001      	beq.n	8002058 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0b8      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d020      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002070:	4b59      	ldr	r3, [pc, #356]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4a58      	ldr	r2, [pc, #352]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002076:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800207a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002088:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a52      	ldr	r2, [pc, #328]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 800208e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002092:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002094:	4b50      	ldr	r3, [pc, #320]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	494d      	ldr	r1, [pc, #308]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d040      	beq.n	8002134 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d107      	bne.n	80020ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d115      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e07f      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d2:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e073      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e2:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e06b      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f2:	4b39      	ldr	r3, [pc, #228]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f023 0203 	bic.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4936      	ldr	r1, [pc, #216]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002104:	f7ff f950 	bl	80013a8 <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	e00a      	b.n	8002122 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f7ff f94c 	bl	80013a8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e053      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 020c 	and.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	429a      	cmp	r2, r3
 8002132:	d1eb      	bne.n	800210c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002134:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d210      	bcs.n	8002164 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 020f 	bic.w	r2, r3, #15
 800214a:	4922      	ldr	r1, [pc, #136]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e032      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4916      	ldr	r1, [pc, #88]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	490e      	ldr	r1, [pc, #56]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021a2:	f000 f821 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	490a      	ldr	r1, [pc, #40]	; (80021dc <HAL_RCC_ClockConfig+0x1cc>)
 80021b4:	5ccb      	ldrb	r3, [r1, r3]
 80021b6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ba:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <HAL_RCC_ClockConfig+0x1d0>)
 80021bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_RCC_ClockConfig+0x1d4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff f8ac 	bl	8001320 <HAL_InitTick>

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023c00 	.word	0x40023c00
 80021d8:	40023800 	.word	0x40023800
 80021dc:	08005c34 	.word	0x08005c34
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000004 	.word	0x20000004

080021e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021ec:	b090      	sub	sp, #64	; 0x40
 80021ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	637b      	str	r3, [r7, #52]	; 0x34
 80021f4:	2300      	movs	r3, #0
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021f8:	2300      	movs	r3, #0
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002200:	4b59      	ldr	r3, [pc, #356]	; (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	d00d      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x40>
 800220c:	2b08      	cmp	r3, #8
 800220e:	f200 80a1 	bhi.w	8002354 <HAL_RCC_GetSysClockFreq+0x16c>
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x34>
 8002216:	2b04      	cmp	r3, #4
 8002218:	d003      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x3a>
 800221a:	e09b      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800221c:	4b53      	ldr	r3, [pc, #332]	; (800236c <HAL_RCC_GetSysClockFreq+0x184>)
 800221e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002220:	e09b      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002222:	4b53      	ldr	r3, [pc, #332]	; (8002370 <HAL_RCC_GetSysClockFreq+0x188>)
 8002224:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002226:	e098      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002228:	4b4f      	ldr	r3, [pc, #316]	; (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002232:	4b4d      	ldr	r3, [pc, #308]	; (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d028      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223e:	4b4a      	ldr	r3, [pc, #296]	; (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	099b      	lsrs	r3, r3, #6
 8002244:	2200      	movs	r2, #0
 8002246:	623b      	str	r3, [r7, #32]
 8002248:	627a      	str	r2, [r7, #36]	; 0x24
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002250:	2100      	movs	r1, #0
 8002252:	4b47      	ldr	r3, [pc, #284]	; (8002370 <HAL_RCC_GetSysClockFreq+0x188>)
 8002254:	fb03 f201 	mul.w	r2, r3, r1
 8002258:	2300      	movs	r3, #0
 800225a:	fb00 f303 	mul.w	r3, r0, r3
 800225e:	4413      	add	r3, r2
 8002260:	4a43      	ldr	r2, [pc, #268]	; (8002370 <HAL_RCC_GetSysClockFreq+0x188>)
 8002262:	fba0 1202 	umull	r1, r2, r0, r2
 8002266:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002268:	460a      	mov	r2, r1
 800226a:	62ba      	str	r2, [r7, #40]	; 0x28
 800226c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800226e:	4413      	add	r3, r2
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002274:	2200      	movs	r2, #0
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	61fa      	str	r2, [r7, #28]
 800227a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800227e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002282:	f7fd ffc5 	bl	8000210 <__aeabi_uldivmod>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4613      	mov	r3, r2
 800228c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800228e:	e053      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002290:	4b35      	ldr	r3, [pc, #212]	; (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	2200      	movs	r2, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	617a      	str	r2, [r7, #20]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022a2:	f04f 0b00 	mov.w	fp, #0
 80022a6:	4652      	mov	r2, sl
 80022a8:	465b      	mov	r3, fp
 80022aa:	f04f 0000 	mov.w	r0, #0
 80022ae:	f04f 0100 	mov.w	r1, #0
 80022b2:	0159      	lsls	r1, r3, #5
 80022b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b8:	0150      	lsls	r0, r2, #5
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	ebb2 080a 	subs.w	r8, r2, sl
 80022c2:	eb63 090b 	sbc.w	r9, r3, fp
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022da:	ebb2 0408 	subs.w	r4, r2, r8
 80022de:	eb63 0509 	sbc.w	r5, r3, r9
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	00eb      	lsls	r3, r5, #3
 80022ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022f0:	00e2      	lsls	r2, r4, #3
 80022f2:	4614      	mov	r4, r2
 80022f4:	461d      	mov	r5, r3
 80022f6:	eb14 030a 	adds.w	r3, r4, sl
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	eb45 030b 	adc.w	r3, r5, fp
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800230e:	4629      	mov	r1, r5
 8002310:	028b      	lsls	r3, r1, #10
 8002312:	4621      	mov	r1, r4
 8002314:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002318:	4621      	mov	r1, r4
 800231a:	028a      	lsls	r2, r1, #10
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002322:	2200      	movs	r2, #0
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	60fa      	str	r2, [r7, #12]
 8002328:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800232c:	f7fd ff70 	bl	8000210 <__aeabi_uldivmod>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4613      	mov	r3, r2
 8002336:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	0c1b      	lsrs	r3, r3, #16
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	3301      	adds	r3, #1
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002352:	e002      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_RCC_GetSysClockFreq+0x184>)
 8002356:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800235c:	4618      	mov	r0, r3
 800235e:	3740      	adds	r7, #64	; 0x40
 8002360:	46bd      	mov	sp, r7
 8002362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	00f42400 	.word	0x00f42400
 8002370:	017d7840 	.word	0x017d7840

08002374 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <HAL_RCC_GetHCLKFreq+0x14>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000000 	.word	0x20000000

0800238c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002390:	f7ff fff0 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	0a9b      	lsrs	r3, r3, #10
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4903      	ldr	r1, [pc, #12]	; (80023b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	08005c44 	.word	0x08005c44

080023b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023b8:	f7ff ffdc 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	0b5b      	lsrs	r3, r3, #13
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4903      	ldr	r1, [pc, #12]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40023800 	.word	0x40023800
 80023d8:	08005c44 	.word	0x08005c44

080023dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d012      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002404:	4b69      	ldr	r3, [pc, #420]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a68      	ldr	r2, [pc, #416]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800240e:	6093      	str	r3, [r2, #8]
 8002410:	4b66      	ldr	r3, [pc, #408]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002418:	4964      	ldr	r1, [pc, #400]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002426:	2301      	movs	r3, #1
 8002428:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d017      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002436:	4b5d      	ldr	r3, [pc, #372]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800243c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002444:	4959      	ldr	r1, [pc, #356]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002454:	d101      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002456:	2301      	movs	r3, #1
 8002458:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002462:	2301      	movs	r3, #1
 8002464:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d017      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002472:	4b4e      	ldr	r3, [pc, #312]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002478:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	494a      	ldr	r1, [pc, #296]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002490:	d101      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002492:	2301      	movs	r3, #1
 8002494:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024ae:	2301      	movs	r3, #1
 80024b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 808b 	beq.w	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024c0:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	4a39      	ldr	r2, [pc, #228]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ca:	6413      	str	r3, [r2, #64]	; 0x40
 80024cc:	4b37      	ldr	r3, [pc, #220]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024d8:	4b35      	ldr	r3, [pc, #212]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a34      	ldr	r2, [pc, #208]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e4:	f7fe ff60 	bl	80013a8 <HAL_GetTick>
 80024e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ec:	f7fe ff5c 	bl	80013a8 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	; 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e357      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024fe:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800250a:	4b28      	ldr	r3, [pc, #160]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002512:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d035      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	429a      	cmp	r2, r3
 8002526:	d02e      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002528:	4b20      	ldr	r3, [pc, #128]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002530:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002536:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	4a1a      	ldr	r2, [pc, #104]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002548:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800254a:	4a18      	ldr	r2, [pc, #96]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	d114      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe ff24 	bl	80013a8 <HAL_GetTick>
 8002560:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002562:	e00a      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002564:	f7fe ff20 	bl	80013a8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e319      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0ee      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800258e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002592:	d111      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025a2:	400b      	ands	r3, r1
 80025a4:	4901      	ldr	r1, [pc, #4]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
 80025aa:	e00b      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40007000 	.word	0x40007000
 80025b4:	0ffffcff 	.word	0x0ffffcff
 80025b8:	4baa      	ldr	r3, [pc, #680]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4aa9      	ldr	r2, [pc, #676]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025c2:	6093      	str	r3, [r2, #8]
 80025c4:	4ba7      	ldr	r3, [pc, #668]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	49a4      	ldr	r1, [pc, #656]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d010      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025e2:	4ba0      	ldr	r3, [pc, #640]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025e8:	4a9e      	ldr	r2, [pc, #632]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80025f2:	4b9c      	ldr	r3, [pc, #624]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fc:	4999      	ldr	r1, [pc, #612]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002610:	4b94      	ldr	r3, [pc, #592]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800261e:	4991      	ldr	r1, [pc, #580]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002632:	4b8c      	ldr	r3, [pc, #560]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002638:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002640:	4988      	ldr	r1, [pc, #544]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00a      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002654:	4b83      	ldr	r3, [pc, #524]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002662:	4980      	ldr	r1, [pc, #512]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002676:	4b7b      	ldr	r3, [pc, #492]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	4977      	ldr	r1, [pc, #476]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002698:	4b72      	ldr	r3, [pc, #456]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	f023 0203 	bic.w	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	496f      	ldr	r1, [pc, #444]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026ba:	4b6a      	ldr	r3, [pc, #424]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c0:	f023 020c 	bic.w	r2, r3, #12
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c8:	4966      	ldr	r1, [pc, #408]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026dc:	4b61      	ldr	r3, [pc, #388]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	495e      	ldr	r1, [pc, #376]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026fe:	4b59      	ldr	r3, [pc, #356]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002704:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270c:	4955      	ldr	r1, [pc, #340]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002720:	4b50      	ldr	r3, [pc, #320]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	494d      	ldr	r1, [pc, #308]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002742:	4b48      	ldr	r3, [pc, #288]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002748:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002750:	4944      	ldr	r1, [pc, #272]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002764:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	493c      	ldr	r1, [pc, #240]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002786:	4b37      	ldr	r3, [pc, #220]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002794:	4933      	ldr	r1, [pc, #204]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027a8:	4b2e      	ldr	r3, [pc, #184]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027b6:	492b      	ldr	r1, [pc, #172]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d011      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027ca:	4b26      	ldr	r3, [pc, #152]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027d8:	4922      	ldr	r1, [pc, #136]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027e8:	d101      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80027ea:	2301      	movs	r3, #1
 80027ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80027fa:	2301      	movs	r3, #1
 80027fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800280a:	4b16      	ldr	r3, [pc, #88]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002810:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002818:	4912      	ldr	r1, [pc, #72]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00b      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800282c:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800283c:	4909      	ldr	r1, [pc, #36]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d006      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80d9 	beq.w	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002858:	4b02      	ldr	r3, [pc, #8]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a01      	ldr	r2, [pc, #4]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002862:	e001      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002864:	40023800 	.word	0x40023800
 8002868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286a:	f7fe fd9d 	bl	80013a8 <HAL_GetTick>
 800286e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002870:	e008      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002872:	f7fe fd99 	bl	80013a8 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b64      	cmp	r3, #100	; 0x64
 800287e:	d901      	bls.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e194      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002884:	4b6c      	ldr	r3, [pc, #432]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f0      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d021      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d11d      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028a4:	4b64      	ldr	r3, [pc, #400]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028b2:	4b61      	ldr	r3, [pc, #388]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b8:	0e1b      	lsrs	r3, r3, #24
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	019a      	lsls	r2, r3, #6
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	041b      	lsls	r3, r3, #16
 80028ca:	431a      	orrs	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	061b      	lsls	r3, r3, #24
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	071b      	lsls	r3, r3, #28
 80028d8:	4957      	ldr	r1, [pc, #348]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d02e      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800290a:	d129      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800290c:	4b4a      	ldr	r3, [pc, #296]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800290e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002912:	0c1b      	lsrs	r3, r3, #16
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800291a:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800291c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002920:	0f1b      	lsrs	r3, r3, #28
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	019a      	lsls	r2, r3, #6
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	041b      	lsls	r3, r3, #16
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	431a      	orrs	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	071b      	lsls	r3, r3, #28
 8002940:	493d      	ldr	r1, [pc, #244]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002948:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800294a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800294e:	f023 021f 	bic.w	r2, r3, #31
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	3b01      	subs	r3, #1
 8002958:	4937      	ldr	r1, [pc, #220]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01d      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800296c:	4b32      	ldr	r3, [pc, #200]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800296e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002972:	0e1b      	lsrs	r3, r3, #24
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800297a:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800297c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002980:	0f1b      	lsrs	r3, r3, #28
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	019a      	lsls	r2, r3, #6
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	041b      	lsls	r3, r3, #16
 8002994:	431a      	orrs	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	431a      	orrs	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	071b      	lsls	r3, r3, #28
 80029a0:	4925      	ldr	r1, [pc, #148]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d011      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	019a      	lsls	r2, r3, #6
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	041b      	lsls	r3, r3, #16
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	061b      	lsls	r3, r3, #24
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	071b      	lsls	r3, r3, #28
 80029d0:	4919      	ldr	r1, [pc, #100]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029d8:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a16      	ldr	r2, [pc, #88]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e4:	f7fe fce0 	bl	80013a8 <HAL_GetTick>
 80029e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029ec:	f7fe fcdc 	bl	80013a8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	; 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e0d7      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	f040 80cd 	bne.w	8002bac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a08      	ldr	r2, [pc, #32]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a1e:	f7fe fcc3 	bl	80013a8 <HAL_GetTick>
 8002a22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a26:	f7fe fcbf 	bl	80013a8 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b64      	cmp	r3, #100	; 0x64
 8002a32:	d903      	bls.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0ba      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002a38:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a3c:	4b5e      	ldr	r3, [pc, #376]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a48:	d0ed      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d02e      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d12a      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a72:	4b51      	ldr	r3, [pc, #324]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a80:	4b4d      	ldr	r3, [pc, #308]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	0f1b      	lsrs	r3, r3, #28
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	019a      	lsls	r2, r3, #6
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	041b      	lsls	r3, r3, #16
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	061b      	lsls	r3, r3, #24
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	071b      	lsls	r3, r3, #28
 8002aa6:	4944      	ldr	r1, [pc, #272]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002aae:	4b42      	ldr	r3, [pc, #264]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	3b01      	subs	r3, #1
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	493d      	ldr	r1, [pc, #244]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d022      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002adc:	d11d      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ade:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae4:	0e1b      	lsrs	r3, r3, #24
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002aec:	4b32      	ldr	r3, [pc, #200]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af2:	0f1b      	lsrs	r3, r3, #28
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	019a      	lsls	r2, r3, #6
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	041b      	lsls	r3, r3, #16
 8002b06:	431a      	orrs	r2, r3
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	061b      	lsls	r3, r3, #24
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	071b      	lsls	r3, r3, #28
 8002b12:	4929      	ldr	r1, [pc, #164]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d028      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b26:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	0e1b      	lsrs	r3, r3, #24
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b34:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	0c1b      	lsrs	r3, r3, #16
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	019a      	lsls	r2, r3, #6
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	041b      	lsls	r3, r3, #16
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	061b      	lsls	r3, r3, #24
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	071b      	lsls	r3, r3, #28
 8002b5a:	4917      	ldr	r1, [pc, #92]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	4911      	ldr	r1, [pc, #68]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b78:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b84:	f7fe fc10 	bl	80013a8 <HAL_GetTick>
 8002b88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b8c:	f7fe fc0c 	bl	80013a8 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e007      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002baa:	d1ef      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800

08002bbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e040      	b.n	8002c50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fe f9fa 	bl	8000fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2224      	movs	r2, #36	; 0x24
 8002be8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fba2 	bl	8003344 <UART_SetConfig>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e022      	b.n	8002c50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fdfa 	bl	800380c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fe81 	bl	8003950 <UART_CheckIdleState>
 8002c4e:	4603      	mov	r3, r0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d171      	bne.n	8002d54 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_UART_Transmit+0x24>
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e06a      	b.n	8002d56 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2221      	movs	r2, #33	; 0x21
 8002c8c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c8e:	f7fe fb8b 	bl	80013a8 <HAL_GetTick>
 8002c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	88fa      	ldrh	r2, [r7, #6]
 8002c98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	88fa      	ldrh	r2, [r7, #6]
 8002ca0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cac:	d108      	bne.n	8002cc0 <HAL_UART_Transmit+0x68>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d104      	bne.n	8002cc0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	e003      	b.n	8002cc8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cc8:	e02c      	b.n	8002d24 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2180      	movs	r1, #128	; 0x80
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fe72 	bl	80039be <UART_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e038      	b.n	8002d56 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	e007      	b.n	8002d12 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1cc      	bne.n	8002cca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2200      	movs	r2, #0
 8002d38:	2140      	movs	r1, #64	; 0x40
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fe3f 	bl	80039be <UART_WaitOnFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e005      	b.n	8002d56 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e000      	b.n	8002d56 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b0ba      	sub	sp, #232	; 0xe8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d8e:	4013      	ands	r3, r2
 8002d90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d115      	bne.n	8002dc8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00f      	beq.n	8002dc8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d009      	beq.n	8002dc8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8297 	beq.w	80032ec <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	4798      	blx	r3
      }
      return;
 8002dc6:	e291      	b.n	80032ec <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002dc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8117 	beq.w	8003000 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002dde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002de2:	4b85      	ldr	r3, [pc, #532]	; (8002ff8 <HAL_UART_IRQHandler+0x298>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 810a 	beq.w	8003000 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d011      	beq.n	8002e1c <HAL_UART_IRQHandler+0xbc>
 8002df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e12:	f043 0201 	orr.w	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d011      	beq.n	8002e4c <HAL_UART_IRQHandler+0xec>
 8002e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00b      	beq.n	8002e4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e42:	f043 0204 	orr.w	r2, r3, #4
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d011      	beq.n	8002e7c <HAL_UART_IRQHandler+0x11c>
 8002e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00b      	beq.n	8002e7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e72:	f043 0202 	orr.w	r2, r3, #2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d017      	beq.n	8002eb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00b      	beq.n	8002eb8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eae:	f043 0208 	orr.w	r2, r3, #8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d012      	beq.n	8002eea <HAL_UART_IRQHandler+0x18a>
 8002ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00c      	beq.n	8002eea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ed8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 81fd 	beq.w	80032f0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f32:	2b40      	cmp	r3, #64	; 0x40
 8002f34:	d005      	beq.n	8002f42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d04f      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fe01 	bl	8003b4a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f52:	2b40      	cmp	r3, #64	; 0x40
 8002f54:	d141      	bne.n	8002fda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3308      	adds	r3, #8
 8002f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f64:	e853 3f00 	ldrex	r3, [r3]
 8002f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3308      	adds	r3, #8
 8002f7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f92:	e841 2300 	strex	r3, r2, [r1]
 8002f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1d9      	bne.n	8002f56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d013      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fae:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <HAL_UART_IRQHandler+0x29c>)
 8002fb0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fb83 	bl	80016c2 <HAL_DMA_Abort_IT>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d017      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd0:	e00f      	b.n	8002ff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f9a0 	bl	8003318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd8:	e00b      	b.n	8002ff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f99c 	bl	8003318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe0:	e007      	b.n	8002ff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f998 	bl	8003318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002ff0:	e17e      	b.n	80032f0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff2:	bf00      	nop
    return;
 8002ff4:	e17c      	b.n	80032f0 <HAL_UART_IRQHandler+0x590>
 8002ff6:	bf00      	nop
 8002ff8:	04000120 	.word	0x04000120
 8002ffc:	08003c13 	.word	0x08003c13

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003004:	2b01      	cmp	r3, #1
 8003006:	f040 814c 	bne.w	80032a2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800300a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8145 	beq.w	80032a2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 813e 	beq.w	80032a2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2210      	movs	r2, #16
 800302c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	f040 80b6 	bne.w	80031aa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800304a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8150 	beq.w	80032f4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800305a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800305e:	429a      	cmp	r2, r3
 8003060:	f080 8148 	bcs.w	80032f4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800306a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003078:	f000 8086 	beq.w	8003188 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003084:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003088:	e853 3f00 	ldrex	r3, [r3]
 800308c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003090:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1da      	bne.n	800307c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3308      	adds	r3, #8
 80030cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3308      	adds	r3, #8
 80030e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e1      	bne.n	80030c6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3308      	adds	r3, #8
 8003108:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800310c:	e853 3f00 	ldrex	r3, [r3]
 8003110:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3308      	adds	r3, #8
 8003122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003126:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003128:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800312c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e3      	bne.n	8003102 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003150:	e853 3f00 	ldrex	r3, [r3]
 8003154:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003158:	f023 0310 	bic.w	r3, r3, #16
 800315c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800316a:	65bb      	str	r3, [r7, #88]	; 0x58
 800316c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003172:	e841 2300 	strex	r3, r2, [r1]
 8003176:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1e4      	bne.n	8003148 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe fa2d 	bl	80015e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800319a:	b29b      	uxth	r3, r3
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4619      	mov	r1, r3
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f8c2 	bl	800332c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031a8:	e0a4      	b.n	80032f4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8096 	beq.w	80032f8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80031cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 8091 	beq.w	80032f8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031de:	e853 3f00 	ldrex	r3, [r3]
 80031e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031f8:	647b      	str	r3, [r7, #68]	; 0x44
 80031fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003200:	e841 2300 	strex	r3, r2, [r1]
 8003204:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e4      	bne.n	80031d6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3308      	adds	r3, #8
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	623b      	str	r3, [r7, #32]
   return(result);
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3308      	adds	r3, #8
 800322c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003230:	633a      	str	r2, [r7, #48]	; 0x30
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003238:	e841 2300 	strex	r3, r2, [r1]
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1e3      	bne.n	800320c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	e853 3f00 	ldrex	r3, [r3]
 8003264:	60fb      	str	r3, [r7, #12]
   return(result);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f023 0310 	bic.w	r3, r3, #16
 800326c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800327a:	61fb      	str	r3, [r7, #28]
 800327c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327e:	69b9      	ldr	r1, [r7, #24]
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	e841 2300 	strex	r3, r2, [r1]
 8003286:	617b      	str	r3, [r7, #20]
   return(result);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1e4      	bne.n	8003258 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2202      	movs	r2, #2
 8003292:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f846 	bl	800332c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032a0:	e02a      	b.n	80032f8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00e      	beq.n	80032cc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01c      	beq.n	80032fc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	4798      	blx	r3
    }
    return;
 80032ca:	e017      	b.n	80032fc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d012      	beq.n	80032fe <HAL_UART_IRQHandler+0x59e>
 80032d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00c      	beq.n	80032fe <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fcaa 	bl	8003c3e <UART_EndTransmit_IT>
    return;
 80032ea:	e008      	b.n	80032fe <HAL_UART_IRQHandler+0x59e>
      return;
 80032ec:	bf00      	nop
 80032ee:	e006      	b.n	80032fe <HAL_UART_IRQHandler+0x59e>
    return;
 80032f0:	bf00      	nop
 80032f2:	e004      	b.n	80032fe <HAL_UART_IRQHandler+0x59e>
      return;
 80032f4:	bf00      	nop
 80032f6:	e002      	b.n	80032fe <HAL_UART_IRQHandler+0x59e>
      return;
 80032f8:	bf00      	nop
 80032fa:	e000      	b.n	80032fe <HAL_UART_IRQHandler+0x59e>
    return;
 80032fc:	bf00      	nop
  }

}
 80032fe:	37e8      	adds	r7, #232	; 0xe8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	4ba6      	ldr	r3, [pc, #664]	; (8003608 <UART_SetConfig+0x2c4>)
 8003370:	4013      	ands	r3, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6812      	ldr	r2, [r2, #0]
 8003376:	6979      	ldr	r1, [r7, #20]
 8003378:	430b      	orrs	r3, r1
 800337a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a94      	ldr	r2, [pc, #592]	; (800360c <UART_SetConfig+0x2c8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d120      	bne.n	8003402 <UART_SetConfig+0xbe>
 80033c0:	4b93      	ldr	r3, [pc, #588]	; (8003610 <UART_SetConfig+0x2cc>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d816      	bhi.n	80033fc <UART_SetConfig+0xb8>
 80033ce:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <UART_SetConfig+0x90>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	080033e5 	.word	0x080033e5
 80033d8:	080033f1 	.word	0x080033f1
 80033dc:	080033eb 	.word	0x080033eb
 80033e0:	080033f7 	.word	0x080033f7
 80033e4:	2301      	movs	r3, #1
 80033e6:	77fb      	strb	r3, [r7, #31]
 80033e8:	e150      	b.n	800368c <UART_SetConfig+0x348>
 80033ea:	2302      	movs	r3, #2
 80033ec:	77fb      	strb	r3, [r7, #31]
 80033ee:	e14d      	b.n	800368c <UART_SetConfig+0x348>
 80033f0:	2304      	movs	r3, #4
 80033f2:	77fb      	strb	r3, [r7, #31]
 80033f4:	e14a      	b.n	800368c <UART_SetConfig+0x348>
 80033f6:	2308      	movs	r3, #8
 80033f8:	77fb      	strb	r3, [r7, #31]
 80033fa:	e147      	b.n	800368c <UART_SetConfig+0x348>
 80033fc:	2310      	movs	r3, #16
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e144      	b.n	800368c <UART_SetConfig+0x348>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a83      	ldr	r2, [pc, #524]	; (8003614 <UART_SetConfig+0x2d0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d132      	bne.n	8003472 <UART_SetConfig+0x12e>
 800340c:	4b80      	ldr	r3, [pc, #512]	; (8003610 <UART_SetConfig+0x2cc>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b0c      	cmp	r3, #12
 8003418:	d828      	bhi.n	800346c <UART_SetConfig+0x128>
 800341a:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <UART_SetConfig+0xdc>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	08003455 	.word	0x08003455
 8003424:	0800346d 	.word	0x0800346d
 8003428:	0800346d 	.word	0x0800346d
 800342c:	0800346d 	.word	0x0800346d
 8003430:	08003461 	.word	0x08003461
 8003434:	0800346d 	.word	0x0800346d
 8003438:	0800346d 	.word	0x0800346d
 800343c:	0800346d 	.word	0x0800346d
 8003440:	0800345b 	.word	0x0800345b
 8003444:	0800346d 	.word	0x0800346d
 8003448:	0800346d 	.word	0x0800346d
 800344c:	0800346d 	.word	0x0800346d
 8003450:	08003467 	.word	0x08003467
 8003454:	2300      	movs	r3, #0
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	e118      	b.n	800368c <UART_SetConfig+0x348>
 800345a:	2302      	movs	r3, #2
 800345c:	77fb      	strb	r3, [r7, #31]
 800345e:	e115      	b.n	800368c <UART_SetConfig+0x348>
 8003460:	2304      	movs	r3, #4
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e112      	b.n	800368c <UART_SetConfig+0x348>
 8003466:	2308      	movs	r3, #8
 8003468:	77fb      	strb	r3, [r7, #31]
 800346a:	e10f      	b.n	800368c <UART_SetConfig+0x348>
 800346c:	2310      	movs	r3, #16
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e10c      	b.n	800368c <UART_SetConfig+0x348>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a68      	ldr	r2, [pc, #416]	; (8003618 <UART_SetConfig+0x2d4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d120      	bne.n	80034be <UART_SetConfig+0x17a>
 800347c:	4b64      	ldr	r3, [pc, #400]	; (8003610 <UART_SetConfig+0x2cc>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003486:	2b30      	cmp	r3, #48	; 0x30
 8003488:	d013      	beq.n	80034b2 <UART_SetConfig+0x16e>
 800348a:	2b30      	cmp	r3, #48	; 0x30
 800348c:	d814      	bhi.n	80034b8 <UART_SetConfig+0x174>
 800348e:	2b20      	cmp	r3, #32
 8003490:	d009      	beq.n	80034a6 <UART_SetConfig+0x162>
 8003492:	2b20      	cmp	r3, #32
 8003494:	d810      	bhi.n	80034b8 <UART_SetConfig+0x174>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <UART_SetConfig+0x15c>
 800349a:	2b10      	cmp	r3, #16
 800349c:	d006      	beq.n	80034ac <UART_SetConfig+0x168>
 800349e:	e00b      	b.n	80034b8 <UART_SetConfig+0x174>
 80034a0:	2300      	movs	r3, #0
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e0f2      	b.n	800368c <UART_SetConfig+0x348>
 80034a6:	2302      	movs	r3, #2
 80034a8:	77fb      	strb	r3, [r7, #31]
 80034aa:	e0ef      	b.n	800368c <UART_SetConfig+0x348>
 80034ac:	2304      	movs	r3, #4
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	e0ec      	b.n	800368c <UART_SetConfig+0x348>
 80034b2:	2308      	movs	r3, #8
 80034b4:	77fb      	strb	r3, [r7, #31]
 80034b6:	e0e9      	b.n	800368c <UART_SetConfig+0x348>
 80034b8:	2310      	movs	r3, #16
 80034ba:	77fb      	strb	r3, [r7, #31]
 80034bc:	e0e6      	b.n	800368c <UART_SetConfig+0x348>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a56      	ldr	r2, [pc, #344]	; (800361c <UART_SetConfig+0x2d8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d120      	bne.n	800350a <UART_SetConfig+0x1c6>
 80034c8:	4b51      	ldr	r3, [pc, #324]	; (8003610 <UART_SetConfig+0x2cc>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034d2:	2bc0      	cmp	r3, #192	; 0xc0
 80034d4:	d013      	beq.n	80034fe <UART_SetConfig+0x1ba>
 80034d6:	2bc0      	cmp	r3, #192	; 0xc0
 80034d8:	d814      	bhi.n	8003504 <UART_SetConfig+0x1c0>
 80034da:	2b80      	cmp	r3, #128	; 0x80
 80034dc:	d009      	beq.n	80034f2 <UART_SetConfig+0x1ae>
 80034de:	2b80      	cmp	r3, #128	; 0x80
 80034e0:	d810      	bhi.n	8003504 <UART_SetConfig+0x1c0>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <UART_SetConfig+0x1a8>
 80034e6:	2b40      	cmp	r3, #64	; 0x40
 80034e8:	d006      	beq.n	80034f8 <UART_SetConfig+0x1b4>
 80034ea:	e00b      	b.n	8003504 <UART_SetConfig+0x1c0>
 80034ec:	2300      	movs	r3, #0
 80034ee:	77fb      	strb	r3, [r7, #31]
 80034f0:	e0cc      	b.n	800368c <UART_SetConfig+0x348>
 80034f2:	2302      	movs	r3, #2
 80034f4:	77fb      	strb	r3, [r7, #31]
 80034f6:	e0c9      	b.n	800368c <UART_SetConfig+0x348>
 80034f8:	2304      	movs	r3, #4
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e0c6      	b.n	800368c <UART_SetConfig+0x348>
 80034fe:	2308      	movs	r3, #8
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e0c3      	b.n	800368c <UART_SetConfig+0x348>
 8003504:	2310      	movs	r3, #16
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e0c0      	b.n	800368c <UART_SetConfig+0x348>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a44      	ldr	r2, [pc, #272]	; (8003620 <UART_SetConfig+0x2dc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d125      	bne.n	8003560 <UART_SetConfig+0x21c>
 8003514:	4b3e      	ldr	r3, [pc, #248]	; (8003610 <UART_SetConfig+0x2cc>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003522:	d017      	beq.n	8003554 <UART_SetConfig+0x210>
 8003524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003528:	d817      	bhi.n	800355a <UART_SetConfig+0x216>
 800352a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800352e:	d00b      	beq.n	8003548 <UART_SetConfig+0x204>
 8003530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003534:	d811      	bhi.n	800355a <UART_SetConfig+0x216>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <UART_SetConfig+0x1fe>
 800353a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353e:	d006      	beq.n	800354e <UART_SetConfig+0x20a>
 8003540:	e00b      	b.n	800355a <UART_SetConfig+0x216>
 8003542:	2300      	movs	r3, #0
 8003544:	77fb      	strb	r3, [r7, #31]
 8003546:	e0a1      	b.n	800368c <UART_SetConfig+0x348>
 8003548:	2302      	movs	r3, #2
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e09e      	b.n	800368c <UART_SetConfig+0x348>
 800354e:	2304      	movs	r3, #4
 8003550:	77fb      	strb	r3, [r7, #31]
 8003552:	e09b      	b.n	800368c <UART_SetConfig+0x348>
 8003554:	2308      	movs	r3, #8
 8003556:	77fb      	strb	r3, [r7, #31]
 8003558:	e098      	b.n	800368c <UART_SetConfig+0x348>
 800355a:	2310      	movs	r3, #16
 800355c:	77fb      	strb	r3, [r7, #31]
 800355e:	e095      	b.n	800368c <UART_SetConfig+0x348>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a2f      	ldr	r2, [pc, #188]	; (8003624 <UART_SetConfig+0x2e0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d125      	bne.n	80035b6 <UART_SetConfig+0x272>
 800356a:	4b29      	ldr	r3, [pc, #164]	; (8003610 <UART_SetConfig+0x2cc>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003574:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003578:	d017      	beq.n	80035aa <UART_SetConfig+0x266>
 800357a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800357e:	d817      	bhi.n	80035b0 <UART_SetConfig+0x26c>
 8003580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003584:	d00b      	beq.n	800359e <UART_SetConfig+0x25a>
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d811      	bhi.n	80035b0 <UART_SetConfig+0x26c>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <UART_SetConfig+0x254>
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003594:	d006      	beq.n	80035a4 <UART_SetConfig+0x260>
 8003596:	e00b      	b.n	80035b0 <UART_SetConfig+0x26c>
 8003598:	2301      	movs	r3, #1
 800359a:	77fb      	strb	r3, [r7, #31]
 800359c:	e076      	b.n	800368c <UART_SetConfig+0x348>
 800359e:	2302      	movs	r3, #2
 80035a0:	77fb      	strb	r3, [r7, #31]
 80035a2:	e073      	b.n	800368c <UART_SetConfig+0x348>
 80035a4:	2304      	movs	r3, #4
 80035a6:	77fb      	strb	r3, [r7, #31]
 80035a8:	e070      	b.n	800368c <UART_SetConfig+0x348>
 80035aa:	2308      	movs	r3, #8
 80035ac:	77fb      	strb	r3, [r7, #31]
 80035ae:	e06d      	b.n	800368c <UART_SetConfig+0x348>
 80035b0:	2310      	movs	r3, #16
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	e06a      	b.n	800368c <UART_SetConfig+0x348>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1b      	ldr	r2, [pc, #108]	; (8003628 <UART_SetConfig+0x2e4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d138      	bne.n	8003632 <UART_SetConfig+0x2ee>
 80035c0:	4b13      	ldr	r3, [pc, #76]	; (8003610 <UART_SetConfig+0x2cc>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80035ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035ce:	d017      	beq.n	8003600 <UART_SetConfig+0x2bc>
 80035d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035d4:	d82a      	bhi.n	800362c <UART_SetConfig+0x2e8>
 80035d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035da:	d00b      	beq.n	80035f4 <UART_SetConfig+0x2b0>
 80035dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e0:	d824      	bhi.n	800362c <UART_SetConfig+0x2e8>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <UART_SetConfig+0x2aa>
 80035e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ea:	d006      	beq.n	80035fa <UART_SetConfig+0x2b6>
 80035ec:	e01e      	b.n	800362c <UART_SetConfig+0x2e8>
 80035ee:	2300      	movs	r3, #0
 80035f0:	77fb      	strb	r3, [r7, #31]
 80035f2:	e04b      	b.n	800368c <UART_SetConfig+0x348>
 80035f4:	2302      	movs	r3, #2
 80035f6:	77fb      	strb	r3, [r7, #31]
 80035f8:	e048      	b.n	800368c <UART_SetConfig+0x348>
 80035fa:	2304      	movs	r3, #4
 80035fc:	77fb      	strb	r3, [r7, #31]
 80035fe:	e045      	b.n	800368c <UART_SetConfig+0x348>
 8003600:	2308      	movs	r3, #8
 8003602:	77fb      	strb	r3, [r7, #31]
 8003604:	e042      	b.n	800368c <UART_SetConfig+0x348>
 8003606:	bf00      	nop
 8003608:	efff69f3 	.word	0xefff69f3
 800360c:	40011000 	.word	0x40011000
 8003610:	40023800 	.word	0x40023800
 8003614:	40004400 	.word	0x40004400
 8003618:	40004800 	.word	0x40004800
 800361c:	40004c00 	.word	0x40004c00
 8003620:	40005000 	.word	0x40005000
 8003624:	40011400 	.word	0x40011400
 8003628:	40007800 	.word	0x40007800
 800362c:	2310      	movs	r3, #16
 800362e:	77fb      	strb	r3, [r7, #31]
 8003630:	e02c      	b.n	800368c <UART_SetConfig+0x348>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a72      	ldr	r2, [pc, #456]	; (8003800 <UART_SetConfig+0x4bc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d125      	bne.n	8003688 <UART_SetConfig+0x344>
 800363c:	4b71      	ldr	r3, [pc, #452]	; (8003804 <UART_SetConfig+0x4c0>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003646:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800364a:	d017      	beq.n	800367c <UART_SetConfig+0x338>
 800364c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003650:	d817      	bhi.n	8003682 <UART_SetConfig+0x33e>
 8003652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003656:	d00b      	beq.n	8003670 <UART_SetConfig+0x32c>
 8003658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800365c:	d811      	bhi.n	8003682 <UART_SetConfig+0x33e>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <UART_SetConfig+0x326>
 8003662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003666:	d006      	beq.n	8003676 <UART_SetConfig+0x332>
 8003668:	e00b      	b.n	8003682 <UART_SetConfig+0x33e>
 800366a:	2300      	movs	r3, #0
 800366c:	77fb      	strb	r3, [r7, #31]
 800366e:	e00d      	b.n	800368c <UART_SetConfig+0x348>
 8003670:	2302      	movs	r3, #2
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e00a      	b.n	800368c <UART_SetConfig+0x348>
 8003676:	2304      	movs	r3, #4
 8003678:	77fb      	strb	r3, [r7, #31]
 800367a:	e007      	b.n	800368c <UART_SetConfig+0x348>
 800367c:	2308      	movs	r3, #8
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e004      	b.n	800368c <UART_SetConfig+0x348>
 8003682:	2310      	movs	r3, #16
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	e001      	b.n	800368c <UART_SetConfig+0x348>
 8003688:	2310      	movs	r3, #16
 800368a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003694:	d15b      	bne.n	800374e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003696:	7ffb      	ldrb	r3, [r7, #31]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d828      	bhi.n	80036ee <UART_SetConfig+0x3aa>
 800369c:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <UART_SetConfig+0x360>)
 800369e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a2:	bf00      	nop
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036d1 	.word	0x080036d1
 80036ac:	080036d9 	.word	0x080036d9
 80036b0:	080036ef 	.word	0x080036ef
 80036b4:	080036df 	.word	0x080036df
 80036b8:	080036ef 	.word	0x080036ef
 80036bc:	080036ef 	.word	0x080036ef
 80036c0:	080036ef 	.word	0x080036ef
 80036c4:	080036e7 	.word	0x080036e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c8:	f7fe fe60 	bl	800238c <HAL_RCC_GetPCLK1Freq>
 80036cc:	61b8      	str	r0, [r7, #24]
        break;
 80036ce:	e013      	b.n	80036f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036d0:	f7fe fe70 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 80036d4:	61b8      	str	r0, [r7, #24]
        break;
 80036d6:	e00f      	b.n	80036f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d8:	4b4b      	ldr	r3, [pc, #300]	; (8003808 <UART_SetConfig+0x4c4>)
 80036da:	61bb      	str	r3, [r7, #24]
        break;
 80036dc:	e00c      	b.n	80036f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036de:	f7fe fd83 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 80036e2:	61b8      	str	r0, [r7, #24]
        break;
 80036e4:	e008      	b.n	80036f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ea:	61bb      	str	r3, [r7, #24]
        break;
 80036ec:	e004      	b.n	80036f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	77bb      	strb	r3, [r7, #30]
        break;
 80036f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d074      	beq.n	80037e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	005a      	lsls	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	085b      	lsrs	r3, r3, #1
 8003708:	441a      	add	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003712:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b0f      	cmp	r3, #15
 8003718:	d916      	bls.n	8003748 <UART_SetConfig+0x404>
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003720:	d212      	bcs.n	8003748 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	b29b      	uxth	r3, r3
 8003726:	f023 030f 	bic.w	r3, r3, #15
 800372a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	b29b      	uxth	r3, r3
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	b29a      	uxth	r2, r3
 8003738:	89fb      	ldrh	r3, [r7, #14]
 800373a:	4313      	orrs	r3, r2
 800373c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	89fa      	ldrh	r2, [r7, #14]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	e04f      	b.n	80037e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	77bb      	strb	r3, [r7, #30]
 800374c:	e04c      	b.n	80037e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800374e:	7ffb      	ldrb	r3, [r7, #31]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d828      	bhi.n	80037a6 <UART_SetConfig+0x462>
 8003754:	a201      	add	r2, pc, #4	; (adr r2, 800375c <UART_SetConfig+0x418>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	08003781 	.word	0x08003781
 8003760:	08003789 	.word	0x08003789
 8003764:	08003791 	.word	0x08003791
 8003768:	080037a7 	.word	0x080037a7
 800376c:	08003797 	.word	0x08003797
 8003770:	080037a7 	.word	0x080037a7
 8003774:	080037a7 	.word	0x080037a7
 8003778:	080037a7 	.word	0x080037a7
 800377c:	0800379f 	.word	0x0800379f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003780:	f7fe fe04 	bl	800238c <HAL_RCC_GetPCLK1Freq>
 8003784:	61b8      	str	r0, [r7, #24]
        break;
 8003786:	e013      	b.n	80037b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003788:	f7fe fe14 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 800378c:	61b8      	str	r0, [r7, #24]
        break;
 800378e:	e00f      	b.n	80037b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003790:	4b1d      	ldr	r3, [pc, #116]	; (8003808 <UART_SetConfig+0x4c4>)
 8003792:	61bb      	str	r3, [r7, #24]
        break;
 8003794:	e00c      	b.n	80037b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003796:	f7fe fd27 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 800379a:	61b8      	str	r0, [r7, #24]
        break;
 800379c:	e008      	b.n	80037b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800379e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037a2:	61bb      	str	r3, [r7, #24]
        break;
 80037a4:	e004      	b.n	80037b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	77bb      	strb	r3, [r7, #30]
        break;
 80037ae:	bf00      	nop
    }

    if (pclk != 0U)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d018      	beq.n	80037e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	085a      	lsrs	r2, r3, #1
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	441a      	add	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b0f      	cmp	r3, #15
 80037ce:	d909      	bls.n	80037e4 <UART_SetConfig+0x4a0>
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d6:	d205      	bcs.n	80037e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	e001      	b.n	80037e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80037f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40007c00 	.word	0x40007c00
 8003804:	40023800 	.word	0x40023800
 8003808:	00f42400 	.word	0x00f42400

0800380c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01a      	beq.n	8003922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800390a:	d10a      	bne.n	8003922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	605a      	str	r2, [r3, #4]
  }
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af02      	add	r7, sp, #8
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003960:	f7fd fd22 	bl	80013a8 <HAL_GetTick>
 8003964:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b08      	cmp	r3, #8
 8003972:	d10e      	bne.n	8003992 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f81b 	bl	80039be <UART_WaitOnFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e011      	b.n	80039b6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b09c      	sub	sp, #112	; 0x70
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ce:	e0a7      	b.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d6:	f000 80a3 	beq.w	8003b20 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039da:	f7fd fce5 	bl	80013a8 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d302      	bcc.n	80039f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80039ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d13f      	bne.n	8003a70 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a04:	667b      	str	r3, [r7, #100]	; 0x64
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a10:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e6      	bne.n	80039f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3308      	adds	r3, #8
 8003a28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
 8003a30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	663b      	str	r3, [r7, #96]	; 0x60
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3308      	adds	r3, #8
 8003a40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a42:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a4a:	e841 2300 	strex	r3, r2, [r1]
 8003a4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e5      	bne.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e068      	b.n	8003b42 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d050      	beq.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a8c:	d148      	bne.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a96:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003aac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e6      	bne.n	8003a98 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3308      	adds	r3, #8
 8003ae8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003aea:	623a      	str	r2, [r7, #32]
 8003aec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	69f9      	ldr	r1, [r7, #28]
 8003af0:	6a3a      	ldr	r2, [r7, #32]
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e5      	bne.n	8003aca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e010      	b.n	8003b42 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	f43f af48 	beq.w	80039d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3770      	adds	r7, #112	; 0x70
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b095      	sub	sp, #84	; 0x54
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5a:	e853 3f00 	ldrex	r3, [r3]
 8003b5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b70:	643b      	str	r3, [r7, #64]	; 0x40
 8003b72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b78:	e841 2300 	strex	r3, r2, [r1]
 8003b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e6      	bne.n	8003b52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3308      	adds	r3, #8
 8003b8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ba4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e5      	bne.n	8003b84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d118      	bne.n	8003bf2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f023 0310 	bic.w	r3, r3, #16
 8003bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bde:	61bb      	str	r3, [r7, #24]
 8003be0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6979      	ldr	r1, [r7, #20]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	613b      	str	r3, [r7, #16]
   return(result);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e6      	bne.n	8003bc0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c06:	bf00      	nop
 8003c08:	3754      	adds	r7, #84	; 0x54
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f7ff fb71 	bl	8003318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b088      	sub	sp, #32
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	6979      	ldr	r1, [r7, #20]
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	613b      	str	r3, [r7, #16]
   return(result);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e6      	bne.n	8003c46 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff fb3d 	bl	8003304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c8a:	bf00      	nop
 8003c8c:	3720      	adds	r7, #32
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	4603      	mov	r3, r0
 8003c9a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ca0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ca4:	2b84      	cmp	r3, #132	; 0x84
 8003ca6:	d005      	beq.n	8003cb4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003ca8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	3303      	adds	r3, #3
 8003cb2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003cc6:	f000 fae9 	bl	800429c <vTaskStartScheduler>
  
  return osOK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cd2:	b089      	sub	sp, #36	; 0x24
 8003cd4:	af04      	add	r7, sp, #16
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d020      	beq.n	8003d24 <osThreadCreate+0x54>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d01c      	beq.n	8003d24 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685c      	ldr	r4, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681d      	ldr	r5, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691e      	ldr	r6, [r3, #16]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ffc8 	bl	8003c92 <makeFreeRtosPriority>
 8003d02:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d0c:	9202      	str	r2, [sp, #8]
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	9100      	str	r1, [sp, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	4632      	mov	r2, r6
 8003d16:	4629      	mov	r1, r5
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f000 f8ed 	bl	8003ef8 <xTaskCreateStatic>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e01c      	b.n	8003d5e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685c      	ldr	r4, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d30:	b29e      	uxth	r6, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ffaa 	bl	8003c92 <makeFreeRtosPriority>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	f107 030c 	add.w	r3, r7, #12
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	9200      	str	r2, [sp, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	4632      	mov	r2, r6
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f000 f935 	bl	8003fbe <xTaskCreate>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d001      	beq.n	8003d5e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e000      	b.n	8003d60 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d68 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <osDelay+0x16>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	e000      	b.n	8003d80 <osDelay+0x18>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fa55 	bl	8004230 <vTaskDelay>
  
  return osOK;
 8003d86:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f103 0208 	add.w	r2, r3, #8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f04f 32ff 	mov.w	r2, #4294967295
 8003da8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f103 0208 	add.w	r2, r3, #8
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f103 0208 	add.w	r2, r3, #8
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	601a      	str	r2, [r3, #0]
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e32:	b480      	push	{r7}
 8003e34:	b085      	sub	sp, #20
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d103      	bne.n	8003e52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	e00c      	b.n	8003e6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3308      	adds	r3, #8
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	e002      	b.n	8003e60 <vListInsert+0x2e>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d2f6      	bcs.n	8003e5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	601a      	str	r2, [r3, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6892      	ldr	r2, [r2, #8]
 8003eba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6852      	ldr	r2, [r2, #4]
 8003ec4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d103      	bne.n	8003ed8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	1e5a      	subs	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08e      	sub	sp, #56	; 0x38
 8003efc:	af04      	add	r7, sp, #16
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10c      	bne.n	8003f26 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	b672      	cpsid	i
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	b662      	cpsie	i
 8003f20:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10c      	bne.n	8003f46 <xTaskCreateStatic+0x4e>
	__asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f30:	b672      	cpsid	i
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	b662      	cpsie	i
 8003f40:	61fb      	str	r3, [r7, #28]
}
 8003f42:	bf00      	nop
 8003f44:	e7fe      	b.n	8003f44 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f46:	2354      	movs	r3, #84	; 0x54
 8003f48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b54      	cmp	r3, #84	; 0x54
 8003f4e:	d00c      	beq.n	8003f6a <xTaskCreateStatic+0x72>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	b672      	cpsid	i
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	b662      	cpsie	i
 8003f64:	61bb      	str	r3, [r7, #24]
}
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01e      	beq.n	8003fb0 <xTaskCreateStatic+0xb8>
 8003f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	2202      	movs	r2, #2
 8003f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	9303      	str	r3, [sp, #12]
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	9302      	str	r3, [sp, #8]
 8003f92:	f107 0314 	add.w	r3, r7, #20
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f850 	bl	8004048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003faa:	f000 f8d7 	bl	800415c <prvAddNewTaskToReadyList>
 8003fae:	e001      	b.n	8003fb4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fb4:	697b      	ldr	r3, [r7, #20]
	}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3728      	adds	r7, #40	; 0x28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b08c      	sub	sp, #48	; 0x30
 8003fc2:	af04      	add	r7, sp, #16
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 feda 	bl	8004d8c <pvPortMalloc>
 8003fd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00e      	beq.n	8003ffe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fe0:	2054      	movs	r0, #84	; 0x54
 8003fe2:	f000 fed3 	bl	8004d8c <pvPortMalloc>
 8003fe6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ff4:	e005      	b.n	8004002 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ff6:	6978      	ldr	r0, [r7, #20]
 8003ff8:	f000 ff92 	bl	8004f20 <vPortFree>
 8003ffc:	e001      	b.n	8004002 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d017      	beq.n	8004038 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004010:	88fa      	ldrh	r2, [r7, #6]
 8004012:	2300      	movs	r3, #0
 8004014:	9303      	str	r3, [sp, #12]
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	9302      	str	r3, [sp, #8]
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f80e 	bl	8004048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800402c:	69f8      	ldr	r0, [r7, #28]
 800402e:	f000 f895 	bl	800415c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004032:	2301      	movs	r3, #1
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	e002      	b.n	800403e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004038:	f04f 33ff 	mov.w	r3, #4294967295
 800403c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800403e:	69bb      	ldr	r3, [r7, #24]
	}
 8004040:	4618      	mov	r0, r3
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004060:	440b      	add	r3, r1
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f023 0307 	bic.w	r3, r3, #7
 800406e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00c      	beq.n	8004094 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	b672      	cpsid	i
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	b662      	cpsie	i
 800408e:	617b      	str	r3, [r7, #20]
}
 8004090:	bf00      	nop
 8004092:	e7fe      	b.n	8004092 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d01f      	beq.n	80040da <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	e012      	b.n	80040c6 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	7819      	ldrb	r1, [r3, #0]
 80040a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	3334      	adds	r3, #52	; 0x34
 80040b0:	460a      	mov	r2, r1
 80040b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	4413      	add	r3, r2
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d006      	beq.n	80040ce <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	3301      	adds	r3, #1
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	2b0f      	cmp	r3, #15
 80040ca:	d9e9      	bls.n	80040a0 <prvInitialiseNewTask+0x58>
 80040cc:	e000      	b.n	80040d0 <prvInitialiseNewTask+0x88>
			{
				break;
 80040ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040d8:	e003      	b.n	80040e2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	2b06      	cmp	r3, #6
 80040e6:	d901      	bls.n	80040ec <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040e8:	2306      	movs	r3, #6
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	2200      	movs	r2, #0
 80040fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	3304      	adds	r3, #4
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fe64 	bl	8003dd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	3318      	adds	r3, #24
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff fe5f 	bl	8003dd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004116:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411a:	f1c3 0207 	rsb	r2, r3, #7
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004126:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412a:	2200      	movs	r2, #0
 800412c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	68f9      	ldr	r1, [r7, #12]
 800413a:	69b8      	ldr	r0, [r7, #24]
 800413c:	f000 fc32 	bl	80049a4 <pxPortInitialiseStack>
 8004140:	4602      	mov	r2, r0
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004152:	bf00      	nop
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004164:	f000 fd2a 	bl	8004bbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004168:	4b2a      	ldr	r3, [pc, #168]	; (8004214 <prvAddNewTaskToReadyList+0xb8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	4a29      	ldr	r2, [pc, #164]	; (8004214 <prvAddNewTaskToReadyList+0xb8>)
 8004170:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004172:	4b29      	ldr	r3, [pc, #164]	; (8004218 <prvAddNewTaskToReadyList+0xbc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800417a:	4a27      	ldr	r2, [pc, #156]	; (8004218 <prvAddNewTaskToReadyList+0xbc>)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004180:	4b24      	ldr	r3, [pc, #144]	; (8004214 <prvAddNewTaskToReadyList+0xb8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d110      	bne.n	80041aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004188:	f000 fac8 	bl	800471c <prvInitialiseTaskLists>
 800418c:	e00d      	b.n	80041aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800418e:	4b23      	ldr	r3, [pc, #140]	; (800421c <prvAddNewTaskToReadyList+0xc0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004196:	4b20      	ldr	r3, [pc, #128]	; (8004218 <prvAddNewTaskToReadyList+0xbc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d802      	bhi.n	80041aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041a4:	4a1c      	ldr	r2, [pc, #112]	; (8004218 <prvAddNewTaskToReadyList+0xbc>)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041aa:	4b1d      	ldr	r3, [pc, #116]	; (8004220 <prvAddNewTaskToReadyList+0xc4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3301      	adds	r3, #1
 80041b0:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <prvAddNewTaskToReadyList+0xc4>)
 80041b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	2201      	movs	r2, #1
 80041ba:	409a      	lsls	r2, r3
 80041bc:	4b19      	ldr	r3, [pc, #100]	; (8004224 <prvAddNewTaskToReadyList+0xc8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	4a18      	ldr	r2, [pc, #96]	; (8004224 <prvAddNewTaskToReadyList+0xc8>)
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4a15      	ldr	r2, [pc, #84]	; (8004228 <prvAddNewTaskToReadyList+0xcc>)
 80041d4:	441a      	add	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3304      	adds	r3, #4
 80041da:	4619      	mov	r1, r3
 80041dc:	4610      	mov	r0, r2
 80041de:	f7ff fe04 	bl	8003dea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041e2:	f000 fd1f 	bl	8004c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041e6:	4b0d      	ldr	r3, [pc, #52]	; (800421c <prvAddNewTaskToReadyList+0xc0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00e      	beq.n	800420c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <prvAddNewTaskToReadyList+0xbc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d207      	bcs.n	800420c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <prvAddNewTaskToReadyList+0xd0>)
 80041fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800420c:	bf00      	nop
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20000480 	.word	0x20000480
 8004218:	20000380 	.word	0x20000380
 800421c:	2000048c 	.word	0x2000048c
 8004220:	2000049c 	.word	0x2000049c
 8004224:	20000488 	.word	0x20000488
 8004228:	20000384 	.word	0x20000384
 800422c:	e000ed04 	.word	0xe000ed04

08004230 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d019      	beq.n	8004276 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004242:	4b14      	ldr	r3, [pc, #80]	; (8004294 <vTaskDelay+0x64>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00c      	beq.n	8004264 <vTaskDelay+0x34>
	__asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	b672      	cpsid	i
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	b662      	cpsie	i
 800425e:	60bb      	str	r3, [r7, #8]
}
 8004260:	bf00      	nop
 8004262:	e7fe      	b.n	8004262 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004264:	f000 f87e 	bl	8004364 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004268:	2100      	movs	r1, #0
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fb34 	bl	80048d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004270:	f000 f886 	bl	8004380 <xTaskResumeAll>
 8004274:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d107      	bne.n	800428c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <vTaskDelay+0x68>)
 800427e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	200004a8 	.word	0x200004a8
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08a      	sub	sp, #40	; 0x28
 80042a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042aa:	463a      	mov	r2, r7
 80042ac:	1d39      	adds	r1, r7, #4
 80042ae:	f107 0308 	add.w	r3, r7, #8
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f92e 	bl	8000514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042b8:	6839      	ldr	r1, [r7, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	9202      	str	r2, [sp, #8]
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	2300      	movs	r3, #0
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	2300      	movs	r3, #0
 80042c8:	460a      	mov	r2, r1
 80042ca:	4920      	ldr	r1, [pc, #128]	; (800434c <vTaskStartScheduler+0xb0>)
 80042cc:	4820      	ldr	r0, [pc, #128]	; (8004350 <vTaskStartScheduler+0xb4>)
 80042ce:	f7ff fe13 	bl	8003ef8 <xTaskCreateStatic>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4a1f      	ldr	r2, [pc, #124]	; (8004354 <vTaskStartScheduler+0xb8>)
 80042d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042d8:	4b1e      	ldr	r3, [pc, #120]	; (8004354 <vTaskStartScheduler+0xb8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042e0:	2301      	movs	r3, #1
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	e001      	b.n	80042ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d118      	bne.n	8004322 <vTaskStartScheduler+0x86>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	b672      	cpsid	i
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	b662      	cpsie	i
 8004304:	613b      	str	r3, [r7, #16]
}
 8004306:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <vTaskStartScheduler+0xbc>)
 800430a:	f04f 32ff 	mov.w	r2, #4294967295
 800430e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004310:	4b12      	ldr	r3, [pc, #72]	; (800435c <vTaskStartScheduler+0xc0>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004316:	4b12      	ldr	r3, [pc, #72]	; (8004360 <vTaskStartScheduler+0xc4>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800431c:	f000 fbd0 	bl	8004ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004320:	e010      	b.n	8004344 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004328:	d10c      	bne.n	8004344 <vTaskStartScheduler+0xa8>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	b672      	cpsid	i
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	b662      	cpsie	i
 800433e:	60fb      	str	r3, [r7, #12]
}
 8004340:	bf00      	nop
 8004342:	e7fe      	b.n	8004342 <vTaskStartScheduler+0xa6>
}
 8004344:	bf00      	nop
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	08005c2c 	.word	0x08005c2c
 8004350:	080046ed 	.word	0x080046ed
 8004354:	200004a4 	.word	0x200004a4
 8004358:	200004a0 	.word	0x200004a0
 800435c:	2000048c 	.word	0x2000048c
 8004360:	20000484 	.word	0x20000484

08004364 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004368:	4b04      	ldr	r3, [pc, #16]	; (800437c <vTaskSuspendAll+0x18>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3301      	adds	r3, #1
 800436e:	4a03      	ldr	r2, [pc, #12]	; (800437c <vTaskSuspendAll+0x18>)
 8004370:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004372:	bf00      	nop
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	200004a8 	.word	0x200004a8

08004380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800438a:	2300      	movs	r3, #0
 800438c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800438e:	4b42      	ldr	r3, [pc, #264]	; (8004498 <xTaskResumeAll+0x118>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10c      	bne.n	80043b0 <xTaskResumeAll+0x30>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	b672      	cpsid	i
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	b662      	cpsie	i
 80043aa:	603b      	str	r3, [r7, #0]
}
 80043ac:	bf00      	nop
 80043ae:	e7fe      	b.n	80043ae <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043b0:	f000 fc04 	bl	8004bbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043b4:	4b38      	ldr	r3, [pc, #224]	; (8004498 <xTaskResumeAll+0x118>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	4a37      	ldr	r2, [pc, #220]	; (8004498 <xTaskResumeAll+0x118>)
 80043bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043be:	4b36      	ldr	r3, [pc, #216]	; (8004498 <xTaskResumeAll+0x118>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d161      	bne.n	800448a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043c6:	4b35      	ldr	r3, [pc, #212]	; (800449c <xTaskResumeAll+0x11c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d05d      	beq.n	800448a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043ce:	e02e      	b.n	800442e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043d0:	4b33      	ldr	r3, [pc, #204]	; (80044a0 <xTaskResumeAll+0x120>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3318      	adds	r3, #24
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff fd61 	bl	8003ea4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3304      	adds	r3, #4
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fd5c 	bl	8003ea4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	2201      	movs	r2, #1
 80043f2:	409a      	lsls	r2, r3
 80043f4:	4b2b      	ldr	r3, [pc, #172]	; (80044a4 <xTaskResumeAll+0x124>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <xTaskResumeAll+0x124>)
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4a27      	ldr	r2, [pc, #156]	; (80044a8 <xTaskResumeAll+0x128>)
 800440c:	441a      	add	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3304      	adds	r3, #4
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f7ff fce8 	bl	8003dea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441e:	4b23      	ldr	r3, [pc, #140]	; (80044ac <xTaskResumeAll+0x12c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	429a      	cmp	r2, r3
 8004426:	d302      	bcc.n	800442e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004428:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <xTaskResumeAll+0x130>)
 800442a:	2201      	movs	r2, #1
 800442c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800442e:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <xTaskResumeAll+0x120>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1cc      	bne.n	80043d0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800443c:	f000 fa0e 	bl	800485c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004440:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <xTaskResumeAll+0x134>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d010      	beq.n	800446e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800444c:	f000 f836 	bl	80044bc <xTaskIncrementTick>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004456:	4b16      	ldr	r3, [pc, #88]	; (80044b0 <xTaskResumeAll+0x130>)
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3b01      	subs	r3, #1
 8004460:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f1      	bne.n	800444c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004468:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <xTaskResumeAll+0x134>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800446e:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <xTaskResumeAll+0x130>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004476:	2301      	movs	r3, #1
 8004478:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800447a:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <xTaskResumeAll+0x138>)
 800447c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800448a:	f000 fbcb 	bl	8004c24 <vPortExitCritical>

	return xAlreadyYielded;
 800448e:	68bb      	ldr	r3, [r7, #8]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	200004a8 	.word	0x200004a8
 800449c:	20000480 	.word	0x20000480
 80044a0:	20000440 	.word	0x20000440
 80044a4:	20000488 	.word	0x20000488
 80044a8:	20000384 	.word	0x20000384
 80044ac:	20000380 	.word	0x20000380
 80044b0:	20000494 	.word	0x20000494
 80044b4:	20000490 	.word	0x20000490
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044c6:	4b4f      	ldr	r3, [pc, #316]	; (8004604 <xTaskIncrementTick+0x148>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f040 808a 	bne.w	80045e4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044d0:	4b4d      	ldr	r3, [pc, #308]	; (8004608 <xTaskIncrementTick+0x14c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3301      	adds	r3, #1
 80044d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044d8:	4a4b      	ldr	r2, [pc, #300]	; (8004608 <xTaskIncrementTick+0x14c>)
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d122      	bne.n	800452a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80044e4:	4b49      	ldr	r3, [pc, #292]	; (800460c <xTaskIncrementTick+0x150>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00c      	beq.n	8004508 <xTaskIncrementTick+0x4c>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	b672      	cpsid	i
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	b662      	cpsie	i
 8004502:	603b      	str	r3, [r7, #0]
}
 8004504:	bf00      	nop
 8004506:	e7fe      	b.n	8004506 <xTaskIncrementTick+0x4a>
 8004508:	4b40      	ldr	r3, [pc, #256]	; (800460c <xTaskIncrementTick+0x150>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	4b40      	ldr	r3, [pc, #256]	; (8004610 <xTaskIncrementTick+0x154>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a3e      	ldr	r2, [pc, #248]	; (800460c <xTaskIncrementTick+0x150>)
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4a3e      	ldr	r2, [pc, #248]	; (8004610 <xTaskIncrementTick+0x154>)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	4b3d      	ldr	r3, [pc, #244]	; (8004614 <xTaskIncrementTick+0x158>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3301      	adds	r3, #1
 8004522:	4a3c      	ldr	r2, [pc, #240]	; (8004614 <xTaskIncrementTick+0x158>)
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	f000 f999 	bl	800485c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800452a:	4b3b      	ldr	r3, [pc, #236]	; (8004618 <xTaskIncrementTick+0x15c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	429a      	cmp	r2, r3
 8004532:	d348      	bcc.n	80045c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004534:	4b35      	ldr	r3, [pc, #212]	; (800460c <xTaskIncrementTick+0x150>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800453e:	4b36      	ldr	r3, [pc, #216]	; (8004618 <xTaskIncrementTick+0x15c>)
 8004540:	f04f 32ff 	mov.w	r2, #4294967295
 8004544:	601a      	str	r2, [r3, #0]
					break;
 8004546:	e03e      	b.n	80045c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004548:	4b30      	ldr	r3, [pc, #192]	; (800460c <xTaskIncrementTick+0x150>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	429a      	cmp	r2, r3
 800455e:	d203      	bcs.n	8004568 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004560:	4a2d      	ldr	r2, [pc, #180]	; (8004618 <xTaskIncrementTick+0x15c>)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004566:	e02e      	b.n	80045c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	3304      	adds	r3, #4
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fc99 	bl	8003ea4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	2b00      	cmp	r3, #0
 8004578:	d004      	beq.n	8004584 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	3318      	adds	r3, #24
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fc90 	bl	8003ea4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	2201      	movs	r2, #1
 800458a:	409a      	lsls	r2, r3
 800458c:	4b23      	ldr	r3, [pc, #140]	; (800461c <xTaskIncrementTick+0x160>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4313      	orrs	r3, r2
 8004592:	4a22      	ldr	r2, [pc, #136]	; (800461c <xTaskIncrementTick+0x160>)
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <xTaskIncrementTick+0x164>)
 80045a4:	441a      	add	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4619      	mov	r1, r3
 80045ac:	4610      	mov	r0, r2
 80045ae:	f7ff fc1c 	bl	8003dea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b6:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <xTaskIncrementTick+0x168>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	429a      	cmp	r2, r3
 80045be:	d3b9      	bcc.n	8004534 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80045c0:	2301      	movs	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045c4:	e7b6      	b.n	8004534 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045c6:	4b17      	ldr	r3, [pc, #92]	; (8004624 <xTaskIncrementTick+0x168>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045cc:	4914      	ldr	r1, [pc, #80]	; (8004620 <xTaskIncrementTick+0x164>)
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d907      	bls.n	80045ee <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80045de:	2301      	movs	r3, #1
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	e004      	b.n	80045ee <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045e4:	4b10      	ldr	r3, [pc, #64]	; (8004628 <xTaskIncrementTick+0x16c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3301      	adds	r3, #1
 80045ea:	4a0f      	ldr	r2, [pc, #60]	; (8004628 <xTaskIncrementTick+0x16c>)
 80045ec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <xTaskIncrementTick+0x170>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80045f6:	2301      	movs	r3, #1
 80045f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80045fa:	697b      	ldr	r3, [r7, #20]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	200004a8 	.word	0x200004a8
 8004608:	20000484 	.word	0x20000484
 800460c:	20000438 	.word	0x20000438
 8004610:	2000043c 	.word	0x2000043c
 8004614:	20000498 	.word	0x20000498
 8004618:	200004a0 	.word	0x200004a0
 800461c:	20000488 	.word	0x20000488
 8004620:	20000384 	.word	0x20000384
 8004624:	20000380 	.word	0x20000380
 8004628:	20000490 	.word	0x20000490
 800462c:	20000494 	.word	0x20000494

08004630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004636:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <vTaskSwitchContext+0xa8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800463e:	4b27      	ldr	r3, [pc, #156]	; (80046dc <vTaskSwitchContext+0xac>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004644:	e041      	b.n	80046ca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004646:	4b25      	ldr	r3, [pc, #148]	; (80046dc <vTaskSwitchContext+0xac>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800464c:	4b24      	ldr	r3, [pc, #144]	; (80046e0 <vTaskSwitchContext+0xb0>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	fab3 f383 	clz	r3, r3
 8004658:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800465a:	7afb      	ldrb	r3, [r7, #11]
 800465c:	f1c3 031f 	rsb	r3, r3, #31
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	4920      	ldr	r1, [pc, #128]	; (80046e4 <vTaskSwitchContext+0xb4>)
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10c      	bne.n	8004690 <vTaskSwitchContext+0x60>
	__asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467a:	b672      	cpsid	i
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	b662      	cpsie	i
 800468a:	607b      	str	r3, [r7, #4]
}
 800468c:	bf00      	nop
 800468e:	e7fe      	b.n	800468e <vTaskSwitchContext+0x5e>
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4a12      	ldr	r2, [pc, #72]	; (80046e4 <vTaskSwitchContext+0xb4>)
 800469c:	4413      	add	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	3308      	adds	r3, #8
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d104      	bne.n	80046c0 <vTaskSwitchContext+0x90>
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	605a      	str	r2, [r3, #4]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	4a08      	ldr	r2, [pc, #32]	; (80046e8 <vTaskSwitchContext+0xb8>)
 80046c8:	6013      	str	r3, [r2, #0]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	200004a8 	.word	0x200004a8
 80046dc:	20000494 	.word	0x20000494
 80046e0:	20000488 	.word	0x20000488
 80046e4:	20000384 	.word	0x20000384
 80046e8:	20000380 	.word	0x20000380

080046ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046f4:	f000 f852 	bl	800479c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <prvIdleTask+0x28>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d9f9      	bls.n	80046f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004700:	4b05      	ldr	r3, [pc, #20]	; (8004718 <prvIdleTask+0x2c>)
 8004702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004710:	e7f0      	b.n	80046f4 <prvIdleTask+0x8>
 8004712:	bf00      	nop
 8004714:	20000384 	.word	0x20000384
 8004718:	e000ed04 	.word	0xe000ed04

0800471c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004722:	2300      	movs	r3, #0
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	e00c      	b.n	8004742 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4a12      	ldr	r2, [pc, #72]	; (800477c <prvInitialiseTaskLists+0x60>)
 8004734:	4413      	add	r3, r2
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fb2a 	bl	8003d90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3301      	adds	r3, #1
 8004740:	607b      	str	r3, [r7, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b06      	cmp	r3, #6
 8004746:	d9ef      	bls.n	8004728 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004748:	480d      	ldr	r0, [pc, #52]	; (8004780 <prvInitialiseTaskLists+0x64>)
 800474a:	f7ff fb21 	bl	8003d90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800474e:	480d      	ldr	r0, [pc, #52]	; (8004784 <prvInitialiseTaskLists+0x68>)
 8004750:	f7ff fb1e 	bl	8003d90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004754:	480c      	ldr	r0, [pc, #48]	; (8004788 <prvInitialiseTaskLists+0x6c>)
 8004756:	f7ff fb1b 	bl	8003d90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800475a:	480c      	ldr	r0, [pc, #48]	; (800478c <prvInitialiseTaskLists+0x70>)
 800475c:	f7ff fb18 	bl	8003d90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004760:	480b      	ldr	r0, [pc, #44]	; (8004790 <prvInitialiseTaskLists+0x74>)
 8004762:	f7ff fb15 	bl	8003d90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <prvInitialiseTaskLists+0x78>)
 8004768:	4a05      	ldr	r2, [pc, #20]	; (8004780 <prvInitialiseTaskLists+0x64>)
 800476a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <prvInitialiseTaskLists+0x7c>)
 800476e:	4a05      	ldr	r2, [pc, #20]	; (8004784 <prvInitialiseTaskLists+0x68>)
 8004770:	601a      	str	r2, [r3, #0]
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000384 	.word	0x20000384
 8004780:	20000410 	.word	0x20000410
 8004784:	20000424 	.word	0x20000424
 8004788:	20000440 	.word	0x20000440
 800478c:	20000454 	.word	0x20000454
 8004790:	2000046c 	.word	0x2000046c
 8004794:	20000438 	.word	0x20000438
 8004798:	2000043c 	.word	0x2000043c

0800479c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047a2:	e019      	b.n	80047d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047a4:	f000 fa0a 	bl	8004bbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a8:	4b10      	ldr	r3, [pc, #64]	; (80047ec <prvCheckTasksWaitingTermination+0x50>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fb75 	bl	8003ea4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047ba:	4b0d      	ldr	r3, [pc, #52]	; (80047f0 <prvCheckTasksWaitingTermination+0x54>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3b01      	subs	r3, #1
 80047c0:	4a0b      	ldr	r2, [pc, #44]	; (80047f0 <prvCheckTasksWaitingTermination+0x54>)
 80047c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <prvCheckTasksWaitingTermination+0x58>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3b01      	subs	r3, #1
 80047ca:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <prvCheckTasksWaitingTermination+0x58>)
 80047cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047ce:	f000 fa29 	bl	8004c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f810 	bl	80047f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <prvCheckTasksWaitingTermination+0x58>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e1      	bne.n	80047a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000454 	.word	0x20000454
 80047f0:	20000480 	.word	0x20000480
 80047f4:	20000468 	.word	0x20000468

080047f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004806:	2b00      	cmp	r3, #0
 8004808:	d108      	bne.n	800481c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fb86 	bl	8004f20 <vPortFree>
				vPortFree( pxTCB );
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fb83 	bl	8004f20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800481a:	e01a      	b.n	8004852 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004822:	2b01      	cmp	r3, #1
 8004824:	d103      	bne.n	800482e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fb7a 	bl	8004f20 <vPortFree>
	}
 800482c:	e011      	b.n	8004852 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004834:	2b02      	cmp	r3, #2
 8004836:	d00c      	beq.n	8004852 <prvDeleteTCB+0x5a>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	b672      	cpsid	i
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	b662      	cpsie	i
 800484c:	60fb      	str	r3, [r7, #12]
}
 800484e:	bf00      	nop
 8004850:	e7fe      	b.n	8004850 <prvDeleteTCB+0x58>
	}
 8004852:	bf00      	nop
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004862:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <prvResetNextTaskUnblockTime+0x38>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d104      	bne.n	8004876 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <prvResetNextTaskUnblockTime+0x3c>)
 800486e:	f04f 32ff 	mov.w	r2, #4294967295
 8004872:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004874:	e008      	b.n	8004888 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004876:	4b07      	ldr	r3, [pc, #28]	; (8004894 <prvResetNextTaskUnblockTime+0x38>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4a04      	ldr	r2, [pc, #16]	; (8004898 <prvResetNextTaskUnblockTime+0x3c>)
 8004886:	6013      	str	r3, [r2, #0]
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	20000438 	.word	0x20000438
 8004898:	200004a0 	.word	0x200004a0

0800489c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048a2:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <xTaskGetSchedulerState+0x34>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d102      	bne.n	80048b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048aa:	2301      	movs	r3, #1
 80048ac:	607b      	str	r3, [r7, #4]
 80048ae:	e008      	b.n	80048c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048b0:	4b08      	ldr	r3, [pc, #32]	; (80048d4 <xTaskGetSchedulerState+0x38>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d102      	bne.n	80048be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048b8:	2302      	movs	r3, #2
 80048ba:	607b      	str	r3, [r7, #4]
 80048bc:	e001      	b.n	80048c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048be:	2300      	movs	r3, #0
 80048c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048c2:	687b      	ldr	r3, [r7, #4]
	}
 80048c4:	4618      	mov	r0, r3
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	2000048c 	.word	0x2000048c
 80048d4:	200004a8 	.word	0x200004a8

080048d8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048e2:	4b29      	ldr	r3, [pc, #164]	; (8004988 <prvAddCurrentTaskToDelayedList+0xb0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048e8:	4b28      	ldr	r3, [pc, #160]	; (800498c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3304      	adds	r3, #4
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff fad8 	bl	8003ea4 <uxListRemove>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10b      	bne.n	8004912 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80048fa:	4b24      	ldr	r3, [pc, #144]	; (800498c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	2201      	movs	r2, #1
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43da      	mvns	r2, r3
 8004908:	4b21      	ldr	r3, [pc, #132]	; (8004990 <prvAddCurrentTaskToDelayedList+0xb8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4013      	ands	r3, r2
 800490e:	4a20      	ldr	r2, [pc, #128]	; (8004990 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004910:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d10a      	bne.n	8004930 <prvAddCurrentTaskToDelayedList+0x58>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004920:	4b1a      	ldr	r3, [pc, #104]	; (800498c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3304      	adds	r3, #4
 8004926:	4619      	mov	r1, r3
 8004928:	481a      	ldr	r0, [pc, #104]	; (8004994 <prvAddCurrentTaskToDelayedList+0xbc>)
 800492a:	f7ff fa5e 	bl	8003dea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800492e:	e026      	b.n	800497e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4413      	add	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004938:	4b14      	ldr	r3, [pc, #80]	; (800498c <prvAddCurrentTaskToDelayedList+0xb4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	429a      	cmp	r2, r3
 8004946:	d209      	bcs.n	800495c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004948:	4b13      	ldr	r3, [pc, #76]	; (8004998 <prvAddCurrentTaskToDelayedList+0xc0>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	4b0f      	ldr	r3, [pc, #60]	; (800498c <prvAddCurrentTaskToDelayedList+0xb4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3304      	adds	r3, #4
 8004952:	4619      	mov	r1, r3
 8004954:	4610      	mov	r0, r2
 8004956:	f7ff fa6c 	bl	8003e32 <vListInsert>
}
 800495a:	e010      	b.n	800497e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800495c:	4b0f      	ldr	r3, [pc, #60]	; (800499c <prvAddCurrentTaskToDelayedList+0xc4>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	4b0a      	ldr	r3, [pc, #40]	; (800498c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3304      	adds	r3, #4
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f7ff fa62 	bl	8003e32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800496e:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	429a      	cmp	r2, r3
 8004976:	d202      	bcs.n	800497e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004978:	4a09      	ldr	r2, [pc, #36]	; (80049a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	6013      	str	r3, [r2, #0]
}
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000484 	.word	0x20000484
 800498c:	20000380 	.word	0x20000380
 8004990:	20000488 	.word	0x20000488
 8004994:	2000046c 	.word	0x2000046c
 8004998:	2000043c 	.word	0x2000043c
 800499c:	20000438 	.word	0x20000438
 80049a0:	200004a0 	.word	0x200004a0

080049a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3b04      	subs	r3, #4
 80049b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3b04      	subs	r3, #4
 80049c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3b04      	subs	r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049d4:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <pxPortInitialiseStack+0x64>)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3b14      	subs	r3, #20
 80049de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3b04      	subs	r3, #4
 80049ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f06f 0202 	mvn.w	r2, #2
 80049f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3b20      	subs	r3, #32
 80049f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049fa:	68fb      	ldr	r3, [r7, #12]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	08004a0d 	.word	0x08004a0d

08004a0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a16:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <prvTaskExitError+0x5c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1e:	d00c      	beq.n	8004a3a <prvTaskExitError+0x2e>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	b672      	cpsid	i
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	b662      	cpsie	i
 8004a34:	60fb      	str	r3, [r7, #12]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <prvTaskExitError+0x2c>
	__asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	b672      	cpsid	i
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	b662      	cpsie	i
 8004a4e:	60bb      	str	r3, [r7, #8]
}
 8004a50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a52:	bf00      	nop
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0fc      	beq.n	8004a54 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a5a:	bf00      	nop
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	2000000c 	.word	0x2000000c
 8004a6c:	00000000 	.word	0x00000000

08004a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a70:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <pxCurrentTCBConst2>)
 8004a72:	6819      	ldr	r1, [r3, #0]
 8004a74:	6808      	ldr	r0, [r1, #0]
 8004a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7a:	f380 8809 	msr	PSP, r0
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f380 8811 	msr	BASEPRI, r0
 8004a8a:	4770      	bx	lr
 8004a8c:	f3af 8000 	nop.w

08004a90 <pxCurrentTCBConst2>:
 8004a90:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop

08004a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a98:	4808      	ldr	r0, [pc, #32]	; (8004abc <prvPortStartFirstTask+0x24>)
 8004a9a:	6800      	ldr	r0, [r0, #0]
 8004a9c:	6800      	ldr	r0, [r0, #0]
 8004a9e:	f380 8808 	msr	MSP, r0
 8004aa2:	f04f 0000 	mov.w	r0, #0
 8004aa6:	f380 8814 	msr	CONTROL, r0
 8004aaa:	b662      	cpsie	i
 8004aac:	b661      	cpsie	f
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	df00      	svc	0
 8004ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004aba:	bf00      	nop
 8004abc:	e000ed08 	.word	0xe000ed08

08004ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ac6:	4b37      	ldr	r3, [pc, #220]	; (8004ba4 <xPortStartScheduler+0xe4>)
 8004ac8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	22ff      	movs	r2, #255	; 0xff
 8004ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	4b2f      	ldr	r3, [pc, #188]	; (8004ba8 <xPortStartScheduler+0xe8>)
 8004aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004aee:	4b2f      	ldr	r3, [pc, #188]	; (8004bac <xPortStartScheduler+0xec>)
 8004af0:	2207      	movs	r2, #7
 8004af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004af4:	e009      	b.n	8004b0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004af6:	4b2d      	ldr	r3, [pc, #180]	; (8004bac <xPortStartScheduler+0xec>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	4a2b      	ldr	r2, [pc, #172]	; (8004bac <xPortStartScheduler+0xec>)
 8004afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b0a:	78fb      	ldrb	r3, [r7, #3]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b12:	2b80      	cmp	r3, #128	; 0x80
 8004b14:	d0ef      	beq.n	8004af6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b16:	4b25      	ldr	r3, [pc, #148]	; (8004bac <xPortStartScheduler+0xec>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f1c3 0307 	rsb	r3, r3, #7
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d00c      	beq.n	8004b3c <xPortStartScheduler+0x7c>
	__asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	b672      	cpsid	i
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	b662      	cpsie	i
 8004b36:	60bb      	str	r3, [r7, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	e7fe      	b.n	8004b3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <xPortStartScheduler+0xec>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	4a1a      	ldr	r2, [pc, #104]	; (8004bac <xPortStartScheduler+0xec>)
 8004b44:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b46:	4b19      	ldr	r3, [pc, #100]	; (8004bac <xPortStartScheduler+0xec>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b4e:	4a17      	ldr	r2, [pc, #92]	; (8004bac <xPortStartScheduler+0xec>)
 8004b50:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b5a:	4b15      	ldr	r3, [pc, #84]	; (8004bb0 <xPortStartScheduler+0xf0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a14      	ldr	r2, [pc, #80]	; (8004bb0 <xPortStartScheduler+0xf0>)
 8004b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b66:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <xPortStartScheduler+0xf0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <xPortStartScheduler+0xf0>)
 8004b6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b70:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b72:	f000 f8dd 	bl	8004d30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b76:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <xPortStartScheduler+0xf4>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b7c:	f000 f8fc 	bl	8004d78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b80:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <xPortStartScheduler+0xf8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a0c      	ldr	r2, [pc, #48]	; (8004bb8 <xPortStartScheduler+0xf8>)
 8004b86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b8a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b8c:	f7ff ff84 	bl	8004a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b90:	f7ff fd4e 	bl	8004630 <vTaskSwitchContext>
	prvTaskExitError();
 8004b94:	f7ff ff3a 	bl	8004a0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	e000e400 	.word	0xe000e400
 8004ba8:	200004ac 	.word	0x200004ac
 8004bac:	200004b0 	.word	0x200004b0
 8004bb0:	e000ed20 	.word	0xe000ed20
 8004bb4:	2000000c 	.word	0x2000000c
 8004bb8:	e000ef34 	.word	0xe000ef34

08004bbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	b672      	cpsid	i
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	b662      	cpsie	i
 8004bd6:	607b      	str	r3, [r7, #4]
}
 8004bd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bda:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <vPortEnterCritical+0x60>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3301      	adds	r3, #1
 8004be0:	4a0e      	ldr	r2, [pc, #56]	; (8004c1c <vPortEnterCritical+0x60>)
 8004be2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004be4:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <vPortEnterCritical+0x60>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d111      	bne.n	8004c10 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <vPortEnterCritical+0x64>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00c      	beq.n	8004c10 <vPortEnterCritical+0x54>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	b672      	cpsid	i
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	b662      	cpsie	i
 8004c0a:	603b      	str	r3, [r7, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <vPortEnterCritical+0x52>
	}
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	2000000c 	.word	0x2000000c
 8004c20:	e000ed04 	.word	0xe000ed04

08004c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c2a:	4b13      	ldr	r3, [pc, #76]	; (8004c78 <vPortExitCritical+0x54>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10c      	bne.n	8004c4c <vPortExitCritical+0x28>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	b672      	cpsid	i
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	b662      	cpsie	i
 8004c46:	607b      	str	r3, [r7, #4]
}
 8004c48:	bf00      	nop
 8004c4a:	e7fe      	b.n	8004c4a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8004c4c:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <vPortExitCritical+0x54>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	4a09      	ldr	r2, [pc, #36]	; (8004c78 <vPortExitCritical+0x54>)
 8004c54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c56:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <vPortExitCritical+0x54>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d105      	bne.n	8004c6a <vPortExitCritical+0x46>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c68:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	2000000c 	.word	0x2000000c
 8004c7c:	00000000 	.word	0x00000000

08004c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c80:	f3ef 8009 	mrs	r0, PSP
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <pxCurrentTCBConst>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	f01e 0f10 	tst.w	lr, #16
 8004c90:	bf08      	it	eq
 8004c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9a:	6010      	str	r0, [r2, #0]
 8004c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ca4:	b672      	cpsid	i
 8004ca6:	f380 8811 	msr	BASEPRI, r0
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	b662      	cpsie	i
 8004cb4:	f7ff fcbc 	bl	8004630 <vTaskSwitchContext>
 8004cb8:	f04f 0000 	mov.w	r0, #0
 8004cbc:	f380 8811 	msr	BASEPRI, r0
 8004cc0:	bc09      	pop	{r0, r3}
 8004cc2:	6819      	ldr	r1, [r3, #0]
 8004cc4:	6808      	ldr	r0, [r1, #0]
 8004cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cca:	f01e 0f10 	tst.w	lr, #16
 8004cce:	bf08      	it	eq
 8004cd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cd4:	f380 8809 	msr	PSP, r0
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop

08004ce0 <pxCurrentTCBConst>:
 8004ce0:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop

08004ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	b672      	cpsid	i
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	b662      	cpsie	i
 8004d02:	607b      	str	r3, [r7, #4]
}
 8004d04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d06:	f7ff fbd9 	bl	80044bc <xTaskIncrementTick>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <xPortSysTickHandler+0x44>)
 8004d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	f383 8811 	msr	BASEPRI, r3
}
 8004d22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d24:	bf00      	nop
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	e000ed04 	.word	0xe000ed04

08004d30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <vPortSetupTimerInterrupt+0x34>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <vPortSetupTimerInterrupt+0x38>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <vPortSetupTimerInterrupt+0x3c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <vPortSetupTimerInterrupt+0x40>)
 8004d46:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4a:	099b      	lsrs	r3, r3, #6
 8004d4c:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <vPortSetupTimerInterrupt+0x44>)
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d52:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <vPortSetupTimerInterrupt+0x34>)
 8004d54:	2207      	movs	r2, #7
 8004d56:	601a      	str	r2, [r3, #0]
}
 8004d58:	bf00      	nop
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	e000e010 	.word	0xe000e010
 8004d68:	e000e018 	.word	0xe000e018
 8004d6c:	20000000 	.word	0x20000000
 8004d70:	10624dd3 	.word	0x10624dd3
 8004d74:	e000e014 	.word	0xe000e014

08004d78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d88 <vPortEnableVFP+0x10>
 8004d7c:	6801      	ldr	r1, [r0, #0]
 8004d7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d82:	6001      	str	r1, [r0, #0]
 8004d84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d86:	bf00      	nop
 8004d88:	e000ed88 	.word	0xe000ed88

08004d8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	; 0x28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d98:	f7ff fae4 	bl	8004364 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d9c:	4b5b      	ldr	r3, [pc, #364]	; (8004f0c <pvPortMalloc+0x180>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004da4:	f000 f91a 	bl	8004fdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004da8:	4b59      	ldr	r3, [pc, #356]	; (8004f10 <pvPortMalloc+0x184>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f040 8092 	bne.w	8004eda <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01f      	beq.n	8004dfc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d016      	beq.n	8004dfc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f023 0307 	bic.w	r3, r3, #7
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00c      	beq.n	8004dfc <pvPortMalloc+0x70>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	b672      	cpsid	i
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	b662      	cpsie	i
 8004df6:	617b      	str	r3, [r7, #20]
}
 8004df8:	bf00      	nop
 8004dfa:	e7fe      	b.n	8004dfa <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d06b      	beq.n	8004eda <pvPortMalloc+0x14e>
 8004e02:	4b44      	ldr	r3, [pc, #272]	; (8004f14 <pvPortMalloc+0x188>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d866      	bhi.n	8004eda <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e0c:	4b42      	ldr	r3, [pc, #264]	; (8004f18 <pvPortMalloc+0x18c>)
 8004e0e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e10:	4b41      	ldr	r3, [pc, #260]	; (8004f18 <pvPortMalloc+0x18c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e16:	e004      	b.n	8004e22 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d903      	bls.n	8004e34 <pvPortMalloc+0xa8>
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f1      	bne.n	8004e18 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e34:	4b35      	ldr	r3, [pc, #212]	; (8004f0c <pvPortMalloc+0x180>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d04d      	beq.n	8004eda <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2208      	movs	r2, #8
 8004e44:	4413      	add	r3, r2
 8004e46:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	1ad2      	subs	r2, r2, r3
 8004e58:	2308      	movs	r3, #8
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d921      	bls.n	8004ea4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4413      	add	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00c      	beq.n	8004e8c <pvPortMalloc+0x100>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	b672      	cpsid	i
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	b662      	cpsie	i
 8004e86:	613b      	str	r3, [r7, #16]
}
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	1ad2      	subs	r2, r2, r3
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e9e:	69b8      	ldr	r0, [r7, #24]
 8004ea0:	f000 f8fe 	bl	80050a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ea4:	4b1b      	ldr	r3, [pc, #108]	; (8004f14 <pvPortMalloc+0x188>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <pvPortMalloc+0x188>)
 8004eb0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004eb2:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <pvPortMalloc+0x188>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <pvPortMalloc+0x190>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d203      	bcs.n	8004ec6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ebe:	4b15      	ldr	r3, [pc, #84]	; (8004f14 <pvPortMalloc+0x188>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a16      	ldr	r2, [pc, #88]	; (8004f1c <pvPortMalloc+0x190>)
 8004ec4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <pvPortMalloc+0x184>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004eda:	f7ff fa51 	bl	8004380 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00c      	beq.n	8004f02 <pvPortMalloc+0x176>
	__asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	b672      	cpsid	i
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	b662      	cpsie	i
 8004efc:	60fb      	str	r3, [r7, #12]
}
 8004efe:	bf00      	nop
 8004f00:	e7fe      	b.n	8004f00 <pvPortMalloc+0x174>
	return pvReturn;
 8004f02:	69fb      	ldr	r3, [r7, #28]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3728      	adds	r7, #40	; 0x28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	200040bc 	.word	0x200040bc
 8004f10:	200040c8 	.word	0x200040c8
 8004f14:	200040c0 	.word	0x200040c0
 8004f18:	200040b4 	.word	0x200040b4
 8004f1c:	200040c4 	.word	0x200040c4

08004f20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d04c      	beq.n	8004fcc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f32:	2308      	movs	r3, #8
 8004f34:	425b      	negs	r3, r3
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4413      	add	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	4b23      	ldr	r3, [pc, #140]	; (8004fd4 <vPortFree+0xb4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10c      	bne.n	8004f68 <vPortFree+0x48>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	b672      	cpsid	i
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	b662      	cpsie	i
 8004f62:	60fb      	str	r3, [r7, #12]
}
 8004f64:	bf00      	nop
 8004f66:	e7fe      	b.n	8004f66 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00c      	beq.n	8004f8a <vPortFree+0x6a>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	b672      	cpsid	i
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	b662      	cpsie	i
 8004f84:	60bb      	str	r3, [r7, #8]
}
 8004f86:	bf00      	nop
 8004f88:	e7fe      	b.n	8004f88 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <vPortFree+0xb4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d019      	beq.n	8004fcc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d115      	bne.n	8004fcc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <vPortFree+0xb4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	401a      	ands	r2, r3
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004fb0:	f7ff f9d8 	bl	8004364 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	4b07      	ldr	r3, [pc, #28]	; (8004fd8 <vPortFree+0xb8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	4a06      	ldr	r2, [pc, #24]	; (8004fd8 <vPortFree+0xb8>)
 8004fc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fc2:	6938      	ldr	r0, [r7, #16]
 8004fc4:	f000 f86c 	bl	80050a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004fc8:	f7ff f9da 	bl	8004380 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fcc:	bf00      	nop
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	200040c8 	.word	0x200040c8
 8004fd8:	200040c0 	.word	0x200040c0

08004fdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fe2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004fe6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fe8:	4b27      	ldr	r3, [pc, #156]	; (8005088 <prvHeapInit+0xac>)
 8004fea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00c      	beq.n	8005010 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3307      	adds	r3, #7
 8004ffa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0307 	bic.w	r3, r3, #7
 8005002:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	4a1f      	ldr	r2, [pc, #124]	; (8005088 <prvHeapInit+0xac>)
 800500c:	4413      	add	r3, r2
 800500e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005014:	4a1d      	ldr	r2, [pc, #116]	; (800508c <prvHeapInit+0xb0>)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800501a:	4b1c      	ldr	r3, [pc, #112]	; (800508c <prvHeapInit+0xb0>)
 800501c:	2200      	movs	r2, #0
 800501e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	4413      	add	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005028:	2208      	movs	r2, #8
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1a9b      	subs	r3, r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0307 	bic.w	r3, r3, #7
 8005036:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4a15      	ldr	r2, [pc, #84]	; (8005090 <prvHeapInit+0xb4>)
 800503c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800503e:	4b14      	ldr	r3, [pc, #80]	; (8005090 <prvHeapInit+0xb4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2200      	movs	r2, #0
 8005044:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005046:	4b12      	ldr	r3, [pc, #72]	; (8005090 <prvHeapInit+0xb4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	1ad2      	subs	r2, r2, r3
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800505c:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <prvHeapInit+0xb4>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4a0a      	ldr	r2, [pc, #40]	; (8005094 <prvHeapInit+0xb8>)
 800506a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	4a09      	ldr	r2, [pc, #36]	; (8005098 <prvHeapInit+0xbc>)
 8005072:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005074:	4b09      	ldr	r3, [pc, #36]	; (800509c <prvHeapInit+0xc0>)
 8005076:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800507a:	601a      	str	r2, [r3, #0]
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	200004b4 	.word	0x200004b4
 800508c:	200040b4 	.word	0x200040b4
 8005090:	200040bc 	.word	0x200040bc
 8005094:	200040c4 	.word	0x200040c4
 8005098:	200040c0 	.word	0x200040c0
 800509c:	200040c8 	.word	0x200040c8

080050a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050a8:	4b28      	ldr	r3, [pc, #160]	; (800514c <prvInsertBlockIntoFreeList+0xac>)
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	e002      	b.n	80050b4 <prvInsertBlockIntoFreeList+0x14>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d8f7      	bhi.n	80050ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	4413      	add	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d108      	bne.n	80050e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	441a      	add	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	441a      	add	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d118      	bne.n	8005128 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b15      	ldr	r3, [pc, #84]	; (8005150 <prvInsertBlockIntoFreeList+0xb0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d00d      	beq.n	800511e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	441a      	add	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	e008      	b.n	8005130 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800511e:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <prvInsertBlockIntoFreeList+0xb0>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	e003      	b.n	8005130 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	429a      	cmp	r2, r3
 8005136:	d002      	beq.n	800513e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800513e:	bf00      	nop
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	200040b4 	.word	0x200040b4
 8005150:	200040bc 	.word	0x200040bc

08005154 <__errno>:
 8005154:	4b01      	ldr	r3, [pc, #4]	; (800515c <__errno+0x8>)
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	20000010 	.word	0x20000010

08005160 <__libc_init_array>:
 8005160:	b570      	push	{r4, r5, r6, lr}
 8005162:	4d0d      	ldr	r5, [pc, #52]	; (8005198 <__libc_init_array+0x38>)
 8005164:	4c0d      	ldr	r4, [pc, #52]	; (800519c <__libc_init_array+0x3c>)
 8005166:	1b64      	subs	r4, r4, r5
 8005168:	10a4      	asrs	r4, r4, #2
 800516a:	2600      	movs	r6, #0
 800516c:	42a6      	cmp	r6, r4
 800516e:	d109      	bne.n	8005184 <__libc_init_array+0x24>
 8005170:	4d0b      	ldr	r5, [pc, #44]	; (80051a0 <__libc_init_array+0x40>)
 8005172:	4c0c      	ldr	r4, [pc, #48]	; (80051a4 <__libc_init_array+0x44>)
 8005174:	f000 fd1e 	bl	8005bb4 <_init>
 8005178:	1b64      	subs	r4, r4, r5
 800517a:	10a4      	asrs	r4, r4, #2
 800517c:	2600      	movs	r6, #0
 800517e:	42a6      	cmp	r6, r4
 8005180:	d105      	bne.n	800518e <__libc_init_array+0x2e>
 8005182:	bd70      	pop	{r4, r5, r6, pc}
 8005184:	f855 3b04 	ldr.w	r3, [r5], #4
 8005188:	4798      	blx	r3
 800518a:	3601      	adds	r6, #1
 800518c:	e7ee      	b.n	800516c <__libc_init_array+0xc>
 800518e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005192:	4798      	blx	r3
 8005194:	3601      	adds	r6, #1
 8005196:	e7f2      	b.n	800517e <__libc_init_array+0x1e>
 8005198:	08005cb8 	.word	0x08005cb8
 800519c:	08005cb8 	.word	0x08005cb8
 80051a0:	08005cb8 	.word	0x08005cb8
 80051a4:	08005cbc 	.word	0x08005cbc

080051a8 <memset>:
 80051a8:	4402      	add	r2, r0
 80051aa:	4603      	mov	r3, r0
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d100      	bne.n	80051b2 <memset+0xa>
 80051b0:	4770      	bx	lr
 80051b2:	f803 1b01 	strb.w	r1, [r3], #1
 80051b6:	e7f9      	b.n	80051ac <memset+0x4>

080051b8 <_puts_r>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	460e      	mov	r6, r1
 80051bc:	4605      	mov	r5, r0
 80051be:	b118      	cbz	r0, 80051c8 <_puts_r+0x10>
 80051c0:	6983      	ldr	r3, [r0, #24]
 80051c2:	b90b      	cbnz	r3, 80051c8 <_puts_r+0x10>
 80051c4:	f000 fa48 	bl	8005658 <__sinit>
 80051c8:	69ab      	ldr	r3, [r5, #24]
 80051ca:	68ac      	ldr	r4, [r5, #8]
 80051cc:	b913      	cbnz	r3, 80051d4 <_puts_r+0x1c>
 80051ce:	4628      	mov	r0, r5
 80051d0:	f000 fa42 	bl	8005658 <__sinit>
 80051d4:	4b2c      	ldr	r3, [pc, #176]	; (8005288 <_puts_r+0xd0>)
 80051d6:	429c      	cmp	r4, r3
 80051d8:	d120      	bne.n	800521c <_puts_r+0x64>
 80051da:	686c      	ldr	r4, [r5, #4]
 80051dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051de:	07db      	lsls	r3, r3, #31
 80051e0:	d405      	bmi.n	80051ee <_puts_r+0x36>
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	0598      	lsls	r0, r3, #22
 80051e6:	d402      	bmi.n	80051ee <_puts_r+0x36>
 80051e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ea:	f000 fad3 	bl	8005794 <__retarget_lock_acquire_recursive>
 80051ee:	89a3      	ldrh	r3, [r4, #12]
 80051f0:	0719      	lsls	r1, r3, #28
 80051f2:	d51d      	bpl.n	8005230 <_puts_r+0x78>
 80051f4:	6923      	ldr	r3, [r4, #16]
 80051f6:	b1db      	cbz	r3, 8005230 <_puts_r+0x78>
 80051f8:	3e01      	subs	r6, #1
 80051fa:	68a3      	ldr	r3, [r4, #8]
 80051fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005200:	3b01      	subs	r3, #1
 8005202:	60a3      	str	r3, [r4, #8]
 8005204:	bb39      	cbnz	r1, 8005256 <_puts_r+0x9e>
 8005206:	2b00      	cmp	r3, #0
 8005208:	da38      	bge.n	800527c <_puts_r+0xc4>
 800520a:	4622      	mov	r2, r4
 800520c:	210a      	movs	r1, #10
 800520e:	4628      	mov	r0, r5
 8005210:	f000 f848 	bl	80052a4 <__swbuf_r>
 8005214:	3001      	adds	r0, #1
 8005216:	d011      	beq.n	800523c <_puts_r+0x84>
 8005218:	250a      	movs	r5, #10
 800521a:	e011      	b.n	8005240 <_puts_r+0x88>
 800521c:	4b1b      	ldr	r3, [pc, #108]	; (800528c <_puts_r+0xd4>)
 800521e:	429c      	cmp	r4, r3
 8005220:	d101      	bne.n	8005226 <_puts_r+0x6e>
 8005222:	68ac      	ldr	r4, [r5, #8]
 8005224:	e7da      	b.n	80051dc <_puts_r+0x24>
 8005226:	4b1a      	ldr	r3, [pc, #104]	; (8005290 <_puts_r+0xd8>)
 8005228:	429c      	cmp	r4, r3
 800522a:	bf08      	it	eq
 800522c:	68ec      	ldreq	r4, [r5, #12]
 800522e:	e7d5      	b.n	80051dc <_puts_r+0x24>
 8005230:	4621      	mov	r1, r4
 8005232:	4628      	mov	r0, r5
 8005234:	f000 f888 	bl	8005348 <__swsetup_r>
 8005238:	2800      	cmp	r0, #0
 800523a:	d0dd      	beq.n	80051f8 <_puts_r+0x40>
 800523c:	f04f 35ff 	mov.w	r5, #4294967295
 8005240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005242:	07da      	lsls	r2, r3, #31
 8005244:	d405      	bmi.n	8005252 <_puts_r+0x9a>
 8005246:	89a3      	ldrh	r3, [r4, #12]
 8005248:	059b      	lsls	r3, r3, #22
 800524a:	d402      	bmi.n	8005252 <_puts_r+0x9a>
 800524c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800524e:	f000 faa2 	bl	8005796 <__retarget_lock_release_recursive>
 8005252:	4628      	mov	r0, r5
 8005254:	bd70      	pop	{r4, r5, r6, pc}
 8005256:	2b00      	cmp	r3, #0
 8005258:	da04      	bge.n	8005264 <_puts_r+0xac>
 800525a:	69a2      	ldr	r2, [r4, #24]
 800525c:	429a      	cmp	r2, r3
 800525e:	dc06      	bgt.n	800526e <_puts_r+0xb6>
 8005260:	290a      	cmp	r1, #10
 8005262:	d004      	beq.n	800526e <_puts_r+0xb6>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	6022      	str	r2, [r4, #0]
 800526a:	7019      	strb	r1, [r3, #0]
 800526c:	e7c5      	b.n	80051fa <_puts_r+0x42>
 800526e:	4622      	mov	r2, r4
 8005270:	4628      	mov	r0, r5
 8005272:	f000 f817 	bl	80052a4 <__swbuf_r>
 8005276:	3001      	adds	r0, #1
 8005278:	d1bf      	bne.n	80051fa <_puts_r+0x42>
 800527a:	e7df      	b.n	800523c <_puts_r+0x84>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	250a      	movs	r5, #10
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	6022      	str	r2, [r4, #0]
 8005284:	701d      	strb	r5, [r3, #0]
 8005286:	e7db      	b.n	8005240 <_puts_r+0x88>
 8005288:	08005c70 	.word	0x08005c70
 800528c:	08005c90 	.word	0x08005c90
 8005290:	08005c50 	.word	0x08005c50

08005294 <puts>:
 8005294:	4b02      	ldr	r3, [pc, #8]	; (80052a0 <puts+0xc>)
 8005296:	4601      	mov	r1, r0
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	f7ff bf8d 	b.w	80051b8 <_puts_r>
 800529e:	bf00      	nop
 80052a0:	20000010 	.word	0x20000010

080052a4 <__swbuf_r>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	460e      	mov	r6, r1
 80052a8:	4614      	mov	r4, r2
 80052aa:	4605      	mov	r5, r0
 80052ac:	b118      	cbz	r0, 80052b6 <__swbuf_r+0x12>
 80052ae:	6983      	ldr	r3, [r0, #24]
 80052b0:	b90b      	cbnz	r3, 80052b6 <__swbuf_r+0x12>
 80052b2:	f000 f9d1 	bl	8005658 <__sinit>
 80052b6:	4b21      	ldr	r3, [pc, #132]	; (800533c <__swbuf_r+0x98>)
 80052b8:	429c      	cmp	r4, r3
 80052ba:	d12b      	bne.n	8005314 <__swbuf_r+0x70>
 80052bc:	686c      	ldr	r4, [r5, #4]
 80052be:	69a3      	ldr	r3, [r4, #24]
 80052c0:	60a3      	str	r3, [r4, #8]
 80052c2:	89a3      	ldrh	r3, [r4, #12]
 80052c4:	071a      	lsls	r2, r3, #28
 80052c6:	d52f      	bpl.n	8005328 <__swbuf_r+0x84>
 80052c8:	6923      	ldr	r3, [r4, #16]
 80052ca:	b36b      	cbz	r3, 8005328 <__swbuf_r+0x84>
 80052cc:	6923      	ldr	r3, [r4, #16]
 80052ce:	6820      	ldr	r0, [r4, #0]
 80052d0:	1ac0      	subs	r0, r0, r3
 80052d2:	6963      	ldr	r3, [r4, #20]
 80052d4:	b2f6      	uxtb	r6, r6
 80052d6:	4283      	cmp	r3, r0
 80052d8:	4637      	mov	r7, r6
 80052da:	dc04      	bgt.n	80052e6 <__swbuf_r+0x42>
 80052dc:	4621      	mov	r1, r4
 80052de:	4628      	mov	r0, r5
 80052e0:	f000 f926 	bl	8005530 <_fflush_r>
 80052e4:	bb30      	cbnz	r0, 8005334 <__swbuf_r+0x90>
 80052e6:	68a3      	ldr	r3, [r4, #8]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	60a3      	str	r3, [r4, #8]
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	6022      	str	r2, [r4, #0]
 80052f2:	701e      	strb	r6, [r3, #0]
 80052f4:	6963      	ldr	r3, [r4, #20]
 80052f6:	3001      	adds	r0, #1
 80052f8:	4283      	cmp	r3, r0
 80052fa:	d004      	beq.n	8005306 <__swbuf_r+0x62>
 80052fc:	89a3      	ldrh	r3, [r4, #12]
 80052fe:	07db      	lsls	r3, r3, #31
 8005300:	d506      	bpl.n	8005310 <__swbuf_r+0x6c>
 8005302:	2e0a      	cmp	r6, #10
 8005304:	d104      	bne.n	8005310 <__swbuf_r+0x6c>
 8005306:	4621      	mov	r1, r4
 8005308:	4628      	mov	r0, r5
 800530a:	f000 f911 	bl	8005530 <_fflush_r>
 800530e:	b988      	cbnz	r0, 8005334 <__swbuf_r+0x90>
 8005310:	4638      	mov	r0, r7
 8005312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005314:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <__swbuf_r+0x9c>)
 8005316:	429c      	cmp	r4, r3
 8005318:	d101      	bne.n	800531e <__swbuf_r+0x7a>
 800531a:	68ac      	ldr	r4, [r5, #8]
 800531c:	e7cf      	b.n	80052be <__swbuf_r+0x1a>
 800531e:	4b09      	ldr	r3, [pc, #36]	; (8005344 <__swbuf_r+0xa0>)
 8005320:	429c      	cmp	r4, r3
 8005322:	bf08      	it	eq
 8005324:	68ec      	ldreq	r4, [r5, #12]
 8005326:	e7ca      	b.n	80052be <__swbuf_r+0x1a>
 8005328:	4621      	mov	r1, r4
 800532a:	4628      	mov	r0, r5
 800532c:	f000 f80c 	bl	8005348 <__swsetup_r>
 8005330:	2800      	cmp	r0, #0
 8005332:	d0cb      	beq.n	80052cc <__swbuf_r+0x28>
 8005334:	f04f 37ff 	mov.w	r7, #4294967295
 8005338:	e7ea      	b.n	8005310 <__swbuf_r+0x6c>
 800533a:	bf00      	nop
 800533c:	08005c70 	.word	0x08005c70
 8005340:	08005c90 	.word	0x08005c90
 8005344:	08005c50 	.word	0x08005c50

08005348 <__swsetup_r>:
 8005348:	4b32      	ldr	r3, [pc, #200]	; (8005414 <__swsetup_r+0xcc>)
 800534a:	b570      	push	{r4, r5, r6, lr}
 800534c:	681d      	ldr	r5, [r3, #0]
 800534e:	4606      	mov	r6, r0
 8005350:	460c      	mov	r4, r1
 8005352:	b125      	cbz	r5, 800535e <__swsetup_r+0x16>
 8005354:	69ab      	ldr	r3, [r5, #24]
 8005356:	b913      	cbnz	r3, 800535e <__swsetup_r+0x16>
 8005358:	4628      	mov	r0, r5
 800535a:	f000 f97d 	bl	8005658 <__sinit>
 800535e:	4b2e      	ldr	r3, [pc, #184]	; (8005418 <__swsetup_r+0xd0>)
 8005360:	429c      	cmp	r4, r3
 8005362:	d10f      	bne.n	8005384 <__swsetup_r+0x3c>
 8005364:	686c      	ldr	r4, [r5, #4]
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800536c:	0719      	lsls	r1, r3, #28
 800536e:	d42c      	bmi.n	80053ca <__swsetup_r+0x82>
 8005370:	06dd      	lsls	r5, r3, #27
 8005372:	d411      	bmi.n	8005398 <__swsetup_r+0x50>
 8005374:	2309      	movs	r3, #9
 8005376:	6033      	str	r3, [r6, #0]
 8005378:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800537c:	81a3      	strh	r3, [r4, #12]
 800537e:	f04f 30ff 	mov.w	r0, #4294967295
 8005382:	e03e      	b.n	8005402 <__swsetup_r+0xba>
 8005384:	4b25      	ldr	r3, [pc, #148]	; (800541c <__swsetup_r+0xd4>)
 8005386:	429c      	cmp	r4, r3
 8005388:	d101      	bne.n	800538e <__swsetup_r+0x46>
 800538a:	68ac      	ldr	r4, [r5, #8]
 800538c:	e7eb      	b.n	8005366 <__swsetup_r+0x1e>
 800538e:	4b24      	ldr	r3, [pc, #144]	; (8005420 <__swsetup_r+0xd8>)
 8005390:	429c      	cmp	r4, r3
 8005392:	bf08      	it	eq
 8005394:	68ec      	ldreq	r4, [r5, #12]
 8005396:	e7e6      	b.n	8005366 <__swsetup_r+0x1e>
 8005398:	0758      	lsls	r0, r3, #29
 800539a:	d512      	bpl.n	80053c2 <__swsetup_r+0x7a>
 800539c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800539e:	b141      	cbz	r1, 80053b2 <__swsetup_r+0x6a>
 80053a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053a4:	4299      	cmp	r1, r3
 80053a6:	d002      	beq.n	80053ae <__swsetup_r+0x66>
 80053a8:	4630      	mov	r0, r6
 80053aa:	f000 fa5b 	bl	8005864 <_free_r>
 80053ae:	2300      	movs	r3, #0
 80053b0:	6363      	str	r3, [r4, #52]	; 0x34
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053b8:	81a3      	strh	r3, [r4, #12]
 80053ba:	2300      	movs	r3, #0
 80053bc:	6063      	str	r3, [r4, #4]
 80053be:	6923      	ldr	r3, [r4, #16]
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	f043 0308 	orr.w	r3, r3, #8
 80053c8:	81a3      	strh	r3, [r4, #12]
 80053ca:	6923      	ldr	r3, [r4, #16]
 80053cc:	b94b      	cbnz	r3, 80053e2 <__swsetup_r+0x9a>
 80053ce:	89a3      	ldrh	r3, [r4, #12]
 80053d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053d8:	d003      	beq.n	80053e2 <__swsetup_r+0x9a>
 80053da:	4621      	mov	r1, r4
 80053dc:	4630      	mov	r0, r6
 80053de:	f000 fa01 	bl	80057e4 <__smakebuf_r>
 80053e2:	89a0      	ldrh	r0, [r4, #12]
 80053e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053e8:	f010 0301 	ands.w	r3, r0, #1
 80053ec:	d00a      	beq.n	8005404 <__swsetup_r+0xbc>
 80053ee:	2300      	movs	r3, #0
 80053f0:	60a3      	str	r3, [r4, #8]
 80053f2:	6963      	ldr	r3, [r4, #20]
 80053f4:	425b      	negs	r3, r3
 80053f6:	61a3      	str	r3, [r4, #24]
 80053f8:	6923      	ldr	r3, [r4, #16]
 80053fa:	b943      	cbnz	r3, 800540e <__swsetup_r+0xc6>
 80053fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005400:	d1ba      	bne.n	8005378 <__swsetup_r+0x30>
 8005402:	bd70      	pop	{r4, r5, r6, pc}
 8005404:	0781      	lsls	r1, r0, #30
 8005406:	bf58      	it	pl
 8005408:	6963      	ldrpl	r3, [r4, #20]
 800540a:	60a3      	str	r3, [r4, #8]
 800540c:	e7f4      	b.n	80053f8 <__swsetup_r+0xb0>
 800540e:	2000      	movs	r0, #0
 8005410:	e7f7      	b.n	8005402 <__swsetup_r+0xba>
 8005412:	bf00      	nop
 8005414:	20000010 	.word	0x20000010
 8005418:	08005c70 	.word	0x08005c70
 800541c:	08005c90 	.word	0x08005c90
 8005420:	08005c50 	.word	0x08005c50

08005424 <__sflush_r>:
 8005424:	898a      	ldrh	r2, [r1, #12]
 8005426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800542a:	4605      	mov	r5, r0
 800542c:	0710      	lsls	r0, r2, #28
 800542e:	460c      	mov	r4, r1
 8005430:	d458      	bmi.n	80054e4 <__sflush_r+0xc0>
 8005432:	684b      	ldr	r3, [r1, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	dc05      	bgt.n	8005444 <__sflush_r+0x20>
 8005438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	dc02      	bgt.n	8005444 <__sflush_r+0x20>
 800543e:	2000      	movs	r0, #0
 8005440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005446:	2e00      	cmp	r6, #0
 8005448:	d0f9      	beq.n	800543e <__sflush_r+0x1a>
 800544a:	2300      	movs	r3, #0
 800544c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005450:	682f      	ldr	r7, [r5, #0]
 8005452:	602b      	str	r3, [r5, #0]
 8005454:	d032      	beq.n	80054bc <__sflush_r+0x98>
 8005456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	075a      	lsls	r2, r3, #29
 800545c:	d505      	bpl.n	800546a <__sflush_r+0x46>
 800545e:	6863      	ldr	r3, [r4, #4]
 8005460:	1ac0      	subs	r0, r0, r3
 8005462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005464:	b10b      	cbz	r3, 800546a <__sflush_r+0x46>
 8005466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005468:	1ac0      	subs	r0, r0, r3
 800546a:	2300      	movs	r3, #0
 800546c:	4602      	mov	r2, r0
 800546e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005470:	6a21      	ldr	r1, [r4, #32]
 8005472:	4628      	mov	r0, r5
 8005474:	47b0      	blx	r6
 8005476:	1c43      	adds	r3, r0, #1
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	d106      	bne.n	800548a <__sflush_r+0x66>
 800547c:	6829      	ldr	r1, [r5, #0]
 800547e:	291d      	cmp	r1, #29
 8005480:	d82c      	bhi.n	80054dc <__sflush_r+0xb8>
 8005482:	4a2a      	ldr	r2, [pc, #168]	; (800552c <__sflush_r+0x108>)
 8005484:	40ca      	lsrs	r2, r1
 8005486:	07d6      	lsls	r6, r2, #31
 8005488:	d528      	bpl.n	80054dc <__sflush_r+0xb8>
 800548a:	2200      	movs	r2, #0
 800548c:	6062      	str	r2, [r4, #4]
 800548e:	04d9      	lsls	r1, r3, #19
 8005490:	6922      	ldr	r2, [r4, #16]
 8005492:	6022      	str	r2, [r4, #0]
 8005494:	d504      	bpl.n	80054a0 <__sflush_r+0x7c>
 8005496:	1c42      	adds	r2, r0, #1
 8005498:	d101      	bne.n	800549e <__sflush_r+0x7a>
 800549a:	682b      	ldr	r3, [r5, #0]
 800549c:	b903      	cbnz	r3, 80054a0 <__sflush_r+0x7c>
 800549e:	6560      	str	r0, [r4, #84]	; 0x54
 80054a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054a2:	602f      	str	r7, [r5, #0]
 80054a4:	2900      	cmp	r1, #0
 80054a6:	d0ca      	beq.n	800543e <__sflush_r+0x1a>
 80054a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054ac:	4299      	cmp	r1, r3
 80054ae:	d002      	beq.n	80054b6 <__sflush_r+0x92>
 80054b0:	4628      	mov	r0, r5
 80054b2:	f000 f9d7 	bl	8005864 <_free_r>
 80054b6:	2000      	movs	r0, #0
 80054b8:	6360      	str	r0, [r4, #52]	; 0x34
 80054ba:	e7c1      	b.n	8005440 <__sflush_r+0x1c>
 80054bc:	6a21      	ldr	r1, [r4, #32]
 80054be:	2301      	movs	r3, #1
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b0      	blx	r6
 80054c4:	1c41      	adds	r1, r0, #1
 80054c6:	d1c7      	bne.n	8005458 <__sflush_r+0x34>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0c4      	beq.n	8005458 <__sflush_r+0x34>
 80054ce:	2b1d      	cmp	r3, #29
 80054d0:	d001      	beq.n	80054d6 <__sflush_r+0xb2>
 80054d2:	2b16      	cmp	r3, #22
 80054d4:	d101      	bne.n	80054da <__sflush_r+0xb6>
 80054d6:	602f      	str	r7, [r5, #0]
 80054d8:	e7b1      	b.n	800543e <__sflush_r+0x1a>
 80054da:	89a3      	ldrh	r3, [r4, #12]
 80054dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054e0:	81a3      	strh	r3, [r4, #12]
 80054e2:	e7ad      	b.n	8005440 <__sflush_r+0x1c>
 80054e4:	690f      	ldr	r7, [r1, #16]
 80054e6:	2f00      	cmp	r7, #0
 80054e8:	d0a9      	beq.n	800543e <__sflush_r+0x1a>
 80054ea:	0793      	lsls	r3, r2, #30
 80054ec:	680e      	ldr	r6, [r1, #0]
 80054ee:	bf08      	it	eq
 80054f0:	694b      	ldreq	r3, [r1, #20]
 80054f2:	600f      	str	r7, [r1, #0]
 80054f4:	bf18      	it	ne
 80054f6:	2300      	movne	r3, #0
 80054f8:	eba6 0807 	sub.w	r8, r6, r7
 80054fc:	608b      	str	r3, [r1, #8]
 80054fe:	f1b8 0f00 	cmp.w	r8, #0
 8005502:	dd9c      	ble.n	800543e <__sflush_r+0x1a>
 8005504:	6a21      	ldr	r1, [r4, #32]
 8005506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005508:	4643      	mov	r3, r8
 800550a:	463a      	mov	r2, r7
 800550c:	4628      	mov	r0, r5
 800550e:	47b0      	blx	r6
 8005510:	2800      	cmp	r0, #0
 8005512:	dc06      	bgt.n	8005522 <__sflush_r+0xfe>
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800551a:	81a3      	strh	r3, [r4, #12]
 800551c:	f04f 30ff 	mov.w	r0, #4294967295
 8005520:	e78e      	b.n	8005440 <__sflush_r+0x1c>
 8005522:	4407      	add	r7, r0
 8005524:	eba8 0800 	sub.w	r8, r8, r0
 8005528:	e7e9      	b.n	80054fe <__sflush_r+0xda>
 800552a:	bf00      	nop
 800552c:	20400001 	.word	0x20400001

08005530 <_fflush_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	690b      	ldr	r3, [r1, #16]
 8005534:	4605      	mov	r5, r0
 8005536:	460c      	mov	r4, r1
 8005538:	b913      	cbnz	r3, 8005540 <_fflush_r+0x10>
 800553a:	2500      	movs	r5, #0
 800553c:	4628      	mov	r0, r5
 800553e:	bd38      	pop	{r3, r4, r5, pc}
 8005540:	b118      	cbz	r0, 800554a <_fflush_r+0x1a>
 8005542:	6983      	ldr	r3, [r0, #24]
 8005544:	b90b      	cbnz	r3, 800554a <_fflush_r+0x1a>
 8005546:	f000 f887 	bl	8005658 <__sinit>
 800554a:	4b14      	ldr	r3, [pc, #80]	; (800559c <_fflush_r+0x6c>)
 800554c:	429c      	cmp	r4, r3
 800554e:	d11b      	bne.n	8005588 <_fflush_r+0x58>
 8005550:	686c      	ldr	r4, [r5, #4]
 8005552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0ef      	beq.n	800553a <_fflush_r+0xa>
 800555a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800555c:	07d0      	lsls	r0, r2, #31
 800555e:	d404      	bmi.n	800556a <_fflush_r+0x3a>
 8005560:	0599      	lsls	r1, r3, #22
 8005562:	d402      	bmi.n	800556a <_fflush_r+0x3a>
 8005564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005566:	f000 f915 	bl	8005794 <__retarget_lock_acquire_recursive>
 800556a:	4628      	mov	r0, r5
 800556c:	4621      	mov	r1, r4
 800556e:	f7ff ff59 	bl	8005424 <__sflush_r>
 8005572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005574:	07da      	lsls	r2, r3, #31
 8005576:	4605      	mov	r5, r0
 8005578:	d4e0      	bmi.n	800553c <_fflush_r+0xc>
 800557a:	89a3      	ldrh	r3, [r4, #12]
 800557c:	059b      	lsls	r3, r3, #22
 800557e:	d4dd      	bmi.n	800553c <_fflush_r+0xc>
 8005580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005582:	f000 f908 	bl	8005796 <__retarget_lock_release_recursive>
 8005586:	e7d9      	b.n	800553c <_fflush_r+0xc>
 8005588:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <_fflush_r+0x70>)
 800558a:	429c      	cmp	r4, r3
 800558c:	d101      	bne.n	8005592 <_fflush_r+0x62>
 800558e:	68ac      	ldr	r4, [r5, #8]
 8005590:	e7df      	b.n	8005552 <_fflush_r+0x22>
 8005592:	4b04      	ldr	r3, [pc, #16]	; (80055a4 <_fflush_r+0x74>)
 8005594:	429c      	cmp	r4, r3
 8005596:	bf08      	it	eq
 8005598:	68ec      	ldreq	r4, [r5, #12]
 800559a:	e7da      	b.n	8005552 <_fflush_r+0x22>
 800559c:	08005c70 	.word	0x08005c70
 80055a0:	08005c90 	.word	0x08005c90
 80055a4:	08005c50 	.word	0x08005c50

080055a8 <std>:
 80055a8:	2300      	movs	r3, #0
 80055aa:	b510      	push	{r4, lr}
 80055ac:	4604      	mov	r4, r0
 80055ae:	e9c0 3300 	strd	r3, r3, [r0]
 80055b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055b6:	6083      	str	r3, [r0, #8]
 80055b8:	8181      	strh	r1, [r0, #12]
 80055ba:	6643      	str	r3, [r0, #100]	; 0x64
 80055bc:	81c2      	strh	r2, [r0, #14]
 80055be:	6183      	str	r3, [r0, #24]
 80055c0:	4619      	mov	r1, r3
 80055c2:	2208      	movs	r2, #8
 80055c4:	305c      	adds	r0, #92	; 0x5c
 80055c6:	f7ff fdef 	bl	80051a8 <memset>
 80055ca:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <std+0x38>)
 80055cc:	6263      	str	r3, [r4, #36]	; 0x24
 80055ce:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <std+0x3c>)
 80055d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80055d2:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <std+0x40>)
 80055d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055d6:	4b05      	ldr	r3, [pc, #20]	; (80055ec <std+0x44>)
 80055d8:	6224      	str	r4, [r4, #32]
 80055da:	6323      	str	r3, [r4, #48]	; 0x30
 80055dc:	bd10      	pop	{r4, pc}
 80055de:	bf00      	nop
 80055e0:	08005a45 	.word	0x08005a45
 80055e4:	08005a67 	.word	0x08005a67
 80055e8:	08005a9f 	.word	0x08005a9f
 80055ec:	08005ac3 	.word	0x08005ac3

080055f0 <_cleanup_r>:
 80055f0:	4901      	ldr	r1, [pc, #4]	; (80055f8 <_cleanup_r+0x8>)
 80055f2:	f000 b8af 	b.w	8005754 <_fwalk_reent>
 80055f6:	bf00      	nop
 80055f8:	08005531 	.word	0x08005531

080055fc <__sfmoreglue>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	2268      	movs	r2, #104	; 0x68
 8005600:	1e4d      	subs	r5, r1, #1
 8005602:	4355      	muls	r5, r2
 8005604:	460e      	mov	r6, r1
 8005606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800560a:	f000 f997 	bl	800593c <_malloc_r>
 800560e:	4604      	mov	r4, r0
 8005610:	b140      	cbz	r0, 8005624 <__sfmoreglue+0x28>
 8005612:	2100      	movs	r1, #0
 8005614:	e9c0 1600 	strd	r1, r6, [r0]
 8005618:	300c      	adds	r0, #12
 800561a:	60a0      	str	r0, [r4, #8]
 800561c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005620:	f7ff fdc2 	bl	80051a8 <memset>
 8005624:	4620      	mov	r0, r4
 8005626:	bd70      	pop	{r4, r5, r6, pc}

08005628 <__sfp_lock_acquire>:
 8005628:	4801      	ldr	r0, [pc, #4]	; (8005630 <__sfp_lock_acquire+0x8>)
 800562a:	f000 b8b3 	b.w	8005794 <__retarget_lock_acquire_recursive>
 800562e:	bf00      	nop
 8005630:	200040cd 	.word	0x200040cd

08005634 <__sfp_lock_release>:
 8005634:	4801      	ldr	r0, [pc, #4]	; (800563c <__sfp_lock_release+0x8>)
 8005636:	f000 b8ae 	b.w	8005796 <__retarget_lock_release_recursive>
 800563a:	bf00      	nop
 800563c:	200040cd 	.word	0x200040cd

08005640 <__sinit_lock_acquire>:
 8005640:	4801      	ldr	r0, [pc, #4]	; (8005648 <__sinit_lock_acquire+0x8>)
 8005642:	f000 b8a7 	b.w	8005794 <__retarget_lock_acquire_recursive>
 8005646:	bf00      	nop
 8005648:	200040ce 	.word	0x200040ce

0800564c <__sinit_lock_release>:
 800564c:	4801      	ldr	r0, [pc, #4]	; (8005654 <__sinit_lock_release+0x8>)
 800564e:	f000 b8a2 	b.w	8005796 <__retarget_lock_release_recursive>
 8005652:	bf00      	nop
 8005654:	200040ce 	.word	0x200040ce

08005658 <__sinit>:
 8005658:	b510      	push	{r4, lr}
 800565a:	4604      	mov	r4, r0
 800565c:	f7ff fff0 	bl	8005640 <__sinit_lock_acquire>
 8005660:	69a3      	ldr	r3, [r4, #24]
 8005662:	b11b      	cbz	r3, 800566c <__sinit+0x14>
 8005664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005668:	f7ff bff0 	b.w	800564c <__sinit_lock_release>
 800566c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005670:	6523      	str	r3, [r4, #80]	; 0x50
 8005672:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <__sinit+0x68>)
 8005674:	4a13      	ldr	r2, [pc, #76]	; (80056c4 <__sinit+0x6c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	62a2      	str	r2, [r4, #40]	; 0x28
 800567a:	42a3      	cmp	r3, r4
 800567c:	bf04      	itt	eq
 800567e:	2301      	moveq	r3, #1
 8005680:	61a3      	streq	r3, [r4, #24]
 8005682:	4620      	mov	r0, r4
 8005684:	f000 f820 	bl	80056c8 <__sfp>
 8005688:	6060      	str	r0, [r4, #4]
 800568a:	4620      	mov	r0, r4
 800568c:	f000 f81c 	bl	80056c8 <__sfp>
 8005690:	60a0      	str	r0, [r4, #8]
 8005692:	4620      	mov	r0, r4
 8005694:	f000 f818 	bl	80056c8 <__sfp>
 8005698:	2200      	movs	r2, #0
 800569a:	60e0      	str	r0, [r4, #12]
 800569c:	2104      	movs	r1, #4
 800569e:	6860      	ldr	r0, [r4, #4]
 80056a0:	f7ff ff82 	bl	80055a8 <std>
 80056a4:	68a0      	ldr	r0, [r4, #8]
 80056a6:	2201      	movs	r2, #1
 80056a8:	2109      	movs	r1, #9
 80056aa:	f7ff ff7d 	bl	80055a8 <std>
 80056ae:	68e0      	ldr	r0, [r4, #12]
 80056b0:	2202      	movs	r2, #2
 80056b2:	2112      	movs	r1, #18
 80056b4:	f7ff ff78 	bl	80055a8 <std>
 80056b8:	2301      	movs	r3, #1
 80056ba:	61a3      	str	r3, [r4, #24]
 80056bc:	e7d2      	b.n	8005664 <__sinit+0xc>
 80056be:	bf00      	nop
 80056c0:	08005c4c 	.word	0x08005c4c
 80056c4:	080055f1 	.word	0x080055f1

080056c8 <__sfp>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	4607      	mov	r7, r0
 80056cc:	f7ff ffac 	bl	8005628 <__sfp_lock_acquire>
 80056d0:	4b1e      	ldr	r3, [pc, #120]	; (800574c <__sfp+0x84>)
 80056d2:	681e      	ldr	r6, [r3, #0]
 80056d4:	69b3      	ldr	r3, [r6, #24]
 80056d6:	b913      	cbnz	r3, 80056de <__sfp+0x16>
 80056d8:	4630      	mov	r0, r6
 80056da:	f7ff ffbd 	bl	8005658 <__sinit>
 80056de:	3648      	adds	r6, #72	; 0x48
 80056e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	d503      	bpl.n	80056f0 <__sfp+0x28>
 80056e8:	6833      	ldr	r3, [r6, #0]
 80056ea:	b30b      	cbz	r3, 8005730 <__sfp+0x68>
 80056ec:	6836      	ldr	r6, [r6, #0]
 80056ee:	e7f7      	b.n	80056e0 <__sfp+0x18>
 80056f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80056f4:	b9d5      	cbnz	r5, 800572c <__sfp+0x64>
 80056f6:	4b16      	ldr	r3, [pc, #88]	; (8005750 <__sfp+0x88>)
 80056f8:	60e3      	str	r3, [r4, #12]
 80056fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056fe:	6665      	str	r5, [r4, #100]	; 0x64
 8005700:	f000 f847 	bl	8005792 <__retarget_lock_init_recursive>
 8005704:	f7ff ff96 	bl	8005634 <__sfp_lock_release>
 8005708:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800570c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005710:	6025      	str	r5, [r4, #0]
 8005712:	61a5      	str	r5, [r4, #24]
 8005714:	2208      	movs	r2, #8
 8005716:	4629      	mov	r1, r5
 8005718:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800571c:	f7ff fd44 	bl	80051a8 <memset>
 8005720:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005724:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005728:	4620      	mov	r0, r4
 800572a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800572c:	3468      	adds	r4, #104	; 0x68
 800572e:	e7d9      	b.n	80056e4 <__sfp+0x1c>
 8005730:	2104      	movs	r1, #4
 8005732:	4638      	mov	r0, r7
 8005734:	f7ff ff62 	bl	80055fc <__sfmoreglue>
 8005738:	4604      	mov	r4, r0
 800573a:	6030      	str	r0, [r6, #0]
 800573c:	2800      	cmp	r0, #0
 800573e:	d1d5      	bne.n	80056ec <__sfp+0x24>
 8005740:	f7ff ff78 	bl	8005634 <__sfp_lock_release>
 8005744:	230c      	movs	r3, #12
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	e7ee      	b.n	8005728 <__sfp+0x60>
 800574a:	bf00      	nop
 800574c:	08005c4c 	.word	0x08005c4c
 8005750:	ffff0001 	.word	0xffff0001

08005754 <_fwalk_reent>:
 8005754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005758:	4606      	mov	r6, r0
 800575a:	4688      	mov	r8, r1
 800575c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005760:	2700      	movs	r7, #0
 8005762:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005766:	f1b9 0901 	subs.w	r9, r9, #1
 800576a:	d505      	bpl.n	8005778 <_fwalk_reent+0x24>
 800576c:	6824      	ldr	r4, [r4, #0]
 800576e:	2c00      	cmp	r4, #0
 8005770:	d1f7      	bne.n	8005762 <_fwalk_reent+0xe>
 8005772:	4638      	mov	r0, r7
 8005774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005778:	89ab      	ldrh	r3, [r5, #12]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d907      	bls.n	800578e <_fwalk_reent+0x3a>
 800577e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005782:	3301      	adds	r3, #1
 8005784:	d003      	beq.n	800578e <_fwalk_reent+0x3a>
 8005786:	4629      	mov	r1, r5
 8005788:	4630      	mov	r0, r6
 800578a:	47c0      	blx	r8
 800578c:	4307      	orrs	r7, r0
 800578e:	3568      	adds	r5, #104	; 0x68
 8005790:	e7e9      	b.n	8005766 <_fwalk_reent+0x12>

08005792 <__retarget_lock_init_recursive>:
 8005792:	4770      	bx	lr

08005794 <__retarget_lock_acquire_recursive>:
 8005794:	4770      	bx	lr

08005796 <__retarget_lock_release_recursive>:
 8005796:	4770      	bx	lr

08005798 <__swhatbuf_r>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	460e      	mov	r6, r1
 800579c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a0:	2900      	cmp	r1, #0
 80057a2:	b096      	sub	sp, #88	; 0x58
 80057a4:	4614      	mov	r4, r2
 80057a6:	461d      	mov	r5, r3
 80057a8:	da08      	bge.n	80057bc <__swhatbuf_r+0x24>
 80057aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	602a      	str	r2, [r5, #0]
 80057b2:	061a      	lsls	r2, r3, #24
 80057b4:	d410      	bmi.n	80057d8 <__swhatbuf_r+0x40>
 80057b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ba:	e00e      	b.n	80057da <__swhatbuf_r+0x42>
 80057bc:	466a      	mov	r2, sp
 80057be:	f000 f9a7 	bl	8005b10 <_fstat_r>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	dbf1      	blt.n	80057aa <__swhatbuf_r+0x12>
 80057c6:	9a01      	ldr	r2, [sp, #4]
 80057c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057d0:	425a      	negs	r2, r3
 80057d2:	415a      	adcs	r2, r3
 80057d4:	602a      	str	r2, [r5, #0]
 80057d6:	e7ee      	b.n	80057b6 <__swhatbuf_r+0x1e>
 80057d8:	2340      	movs	r3, #64	; 0x40
 80057da:	2000      	movs	r0, #0
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	b016      	add	sp, #88	; 0x58
 80057e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080057e4 <__smakebuf_r>:
 80057e4:	898b      	ldrh	r3, [r1, #12]
 80057e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057e8:	079d      	lsls	r5, r3, #30
 80057ea:	4606      	mov	r6, r0
 80057ec:	460c      	mov	r4, r1
 80057ee:	d507      	bpl.n	8005800 <__smakebuf_r+0x1c>
 80057f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	6123      	str	r3, [r4, #16]
 80057f8:	2301      	movs	r3, #1
 80057fa:	6163      	str	r3, [r4, #20]
 80057fc:	b002      	add	sp, #8
 80057fe:	bd70      	pop	{r4, r5, r6, pc}
 8005800:	ab01      	add	r3, sp, #4
 8005802:	466a      	mov	r2, sp
 8005804:	f7ff ffc8 	bl	8005798 <__swhatbuf_r>
 8005808:	9900      	ldr	r1, [sp, #0]
 800580a:	4605      	mov	r5, r0
 800580c:	4630      	mov	r0, r6
 800580e:	f000 f895 	bl	800593c <_malloc_r>
 8005812:	b948      	cbnz	r0, 8005828 <__smakebuf_r+0x44>
 8005814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005818:	059a      	lsls	r2, r3, #22
 800581a:	d4ef      	bmi.n	80057fc <__smakebuf_r+0x18>
 800581c:	f023 0303 	bic.w	r3, r3, #3
 8005820:	f043 0302 	orr.w	r3, r3, #2
 8005824:	81a3      	strh	r3, [r4, #12]
 8005826:	e7e3      	b.n	80057f0 <__smakebuf_r+0xc>
 8005828:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <__smakebuf_r+0x7c>)
 800582a:	62b3      	str	r3, [r6, #40]	; 0x28
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	6020      	str	r0, [r4, #0]
 8005830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005834:	81a3      	strh	r3, [r4, #12]
 8005836:	9b00      	ldr	r3, [sp, #0]
 8005838:	6163      	str	r3, [r4, #20]
 800583a:	9b01      	ldr	r3, [sp, #4]
 800583c:	6120      	str	r0, [r4, #16]
 800583e:	b15b      	cbz	r3, 8005858 <__smakebuf_r+0x74>
 8005840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005844:	4630      	mov	r0, r6
 8005846:	f000 f975 	bl	8005b34 <_isatty_r>
 800584a:	b128      	cbz	r0, 8005858 <__smakebuf_r+0x74>
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	f023 0303 	bic.w	r3, r3, #3
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	81a3      	strh	r3, [r4, #12]
 8005858:	89a0      	ldrh	r0, [r4, #12]
 800585a:	4305      	orrs	r5, r0
 800585c:	81a5      	strh	r5, [r4, #12]
 800585e:	e7cd      	b.n	80057fc <__smakebuf_r+0x18>
 8005860:	080055f1 	.word	0x080055f1

08005864 <_free_r>:
 8005864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005866:	2900      	cmp	r1, #0
 8005868:	d044      	beq.n	80058f4 <_free_r+0x90>
 800586a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800586e:	9001      	str	r0, [sp, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	f1a1 0404 	sub.w	r4, r1, #4
 8005876:	bfb8      	it	lt
 8005878:	18e4      	addlt	r4, r4, r3
 800587a:	f000 f97d 	bl	8005b78 <__malloc_lock>
 800587e:	4a1e      	ldr	r2, [pc, #120]	; (80058f8 <_free_r+0x94>)
 8005880:	9801      	ldr	r0, [sp, #4]
 8005882:	6813      	ldr	r3, [r2, #0]
 8005884:	b933      	cbnz	r3, 8005894 <_free_r+0x30>
 8005886:	6063      	str	r3, [r4, #4]
 8005888:	6014      	str	r4, [r2, #0]
 800588a:	b003      	add	sp, #12
 800588c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005890:	f000 b978 	b.w	8005b84 <__malloc_unlock>
 8005894:	42a3      	cmp	r3, r4
 8005896:	d908      	bls.n	80058aa <_free_r+0x46>
 8005898:	6825      	ldr	r5, [r4, #0]
 800589a:	1961      	adds	r1, r4, r5
 800589c:	428b      	cmp	r3, r1
 800589e:	bf01      	itttt	eq
 80058a0:	6819      	ldreq	r1, [r3, #0]
 80058a2:	685b      	ldreq	r3, [r3, #4]
 80058a4:	1949      	addeq	r1, r1, r5
 80058a6:	6021      	streq	r1, [r4, #0]
 80058a8:	e7ed      	b.n	8005886 <_free_r+0x22>
 80058aa:	461a      	mov	r2, r3
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	b10b      	cbz	r3, 80058b4 <_free_r+0x50>
 80058b0:	42a3      	cmp	r3, r4
 80058b2:	d9fa      	bls.n	80058aa <_free_r+0x46>
 80058b4:	6811      	ldr	r1, [r2, #0]
 80058b6:	1855      	adds	r5, r2, r1
 80058b8:	42a5      	cmp	r5, r4
 80058ba:	d10b      	bne.n	80058d4 <_free_r+0x70>
 80058bc:	6824      	ldr	r4, [r4, #0]
 80058be:	4421      	add	r1, r4
 80058c0:	1854      	adds	r4, r2, r1
 80058c2:	42a3      	cmp	r3, r4
 80058c4:	6011      	str	r1, [r2, #0]
 80058c6:	d1e0      	bne.n	800588a <_free_r+0x26>
 80058c8:	681c      	ldr	r4, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	6053      	str	r3, [r2, #4]
 80058ce:	4421      	add	r1, r4
 80058d0:	6011      	str	r1, [r2, #0]
 80058d2:	e7da      	b.n	800588a <_free_r+0x26>
 80058d4:	d902      	bls.n	80058dc <_free_r+0x78>
 80058d6:	230c      	movs	r3, #12
 80058d8:	6003      	str	r3, [r0, #0]
 80058da:	e7d6      	b.n	800588a <_free_r+0x26>
 80058dc:	6825      	ldr	r5, [r4, #0]
 80058de:	1961      	adds	r1, r4, r5
 80058e0:	428b      	cmp	r3, r1
 80058e2:	bf04      	itt	eq
 80058e4:	6819      	ldreq	r1, [r3, #0]
 80058e6:	685b      	ldreq	r3, [r3, #4]
 80058e8:	6063      	str	r3, [r4, #4]
 80058ea:	bf04      	itt	eq
 80058ec:	1949      	addeq	r1, r1, r5
 80058ee:	6021      	streq	r1, [r4, #0]
 80058f0:	6054      	str	r4, [r2, #4]
 80058f2:	e7ca      	b.n	800588a <_free_r+0x26>
 80058f4:	b003      	add	sp, #12
 80058f6:	bd30      	pop	{r4, r5, pc}
 80058f8:	200040d0 	.word	0x200040d0

080058fc <sbrk_aligned>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	4e0e      	ldr	r6, [pc, #56]	; (8005938 <sbrk_aligned+0x3c>)
 8005900:	460c      	mov	r4, r1
 8005902:	6831      	ldr	r1, [r6, #0]
 8005904:	4605      	mov	r5, r0
 8005906:	b911      	cbnz	r1, 800590e <sbrk_aligned+0x12>
 8005908:	f000 f88c 	bl	8005a24 <_sbrk_r>
 800590c:	6030      	str	r0, [r6, #0]
 800590e:	4621      	mov	r1, r4
 8005910:	4628      	mov	r0, r5
 8005912:	f000 f887 	bl	8005a24 <_sbrk_r>
 8005916:	1c43      	adds	r3, r0, #1
 8005918:	d00a      	beq.n	8005930 <sbrk_aligned+0x34>
 800591a:	1cc4      	adds	r4, r0, #3
 800591c:	f024 0403 	bic.w	r4, r4, #3
 8005920:	42a0      	cmp	r0, r4
 8005922:	d007      	beq.n	8005934 <sbrk_aligned+0x38>
 8005924:	1a21      	subs	r1, r4, r0
 8005926:	4628      	mov	r0, r5
 8005928:	f000 f87c 	bl	8005a24 <_sbrk_r>
 800592c:	3001      	adds	r0, #1
 800592e:	d101      	bne.n	8005934 <sbrk_aligned+0x38>
 8005930:	f04f 34ff 	mov.w	r4, #4294967295
 8005934:	4620      	mov	r0, r4
 8005936:	bd70      	pop	{r4, r5, r6, pc}
 8005938:	200040d4 	.word	0x200040d4

0800593c <_malloc_r>:
 800593c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005940:	1ccd      	adds	r5, r1, #3
 8005942:	f025 0503 	bic.w	r5, r5, #3
 8005946:	3508      	adds	r5, #8
 8005948:	2d0c      	cmp	r5, #12
 800594a:	bf38      	it	cc
 800594c:	250c      	movcc	r5, #12
 800594e:	2d00      	cmp	r5, #0
 8005950:	4607      	mov	r7, r0
 8005952:	db01      	blt.n	8005958 <_malloc_r+0x1c>
 8005954:	42a9      	cmp	r1, r5
 8005956:	d905      	bls.n	8005964 <_malloc_r+0x28>
 8005958:	230c      	movs	r3, #12
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	2600      	movs	r6, #0
 800595e:	4630      	mov	r0, r6
 8005960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005964:	4e2e      	ldr	r6, [pc, #184]	; (8005a20 <_malloc_r+0xe4>)
 8005966:	f000 f907 	bl	8005b78 <__malloc_lock>
 800596a:	6833      	ldr	r3, [r6, #0]
 800596c:	461c      	mov	r4, r3
 800596e:	bb34      	cbnz	r4, 80059be <_malloc_r+0x82>
 8005970:	4629      	mov	r1, r5
 8005972:	4638      	mov	r0, r7
 8005974:	f7ff ffc2 	bl	80058fc <sbrk_aligned>
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	4604      	mov	r4, r0
 800597c:	d14d      	bne.n	8005a1a <_malloc_r+0xde>
 800597e:	6834      	ldr	r4, [r6, #0]
 8005980:	4626      	mov	r6, r4
 8005982:	2e00      	cmp	r6, #0
 8005984:	d140      	bne.n	8005a08 <_malloc_r+0xcc>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	4631      	mov	r1, r6
 800598a:	4638      	mov	r0, r7
 800598c:	eb04 0803 	add.w	r8, r4, r3
 8005990:	f000 f848 	bl	8005a24 <_sbrk_r>
 8005994:	4580      	cmp	r8, r0
 8005996:	d13a      	bne.n	8005a0e <_malloc_r+0xd2>
 8005998:	6821      	ldr	r1, [r4, #0]
 800599a:	3503      	adds	r5, #3
 800599c:	1a6d      	subs	r5, r5, r1
 800599e:	f025 0503 	bic.w	r5, r5, #3
 80059a2:	3508      	adds	r5, #8
 80059a4:	2d0c      	cmp	r5, #12
 80059a6:	bf38      	it	cc
 80059a8:	250c      	movcc	r5, #12
 80059aa:	4629      	mov	r1, r5
 80059ac:	4638      	mov	r0, r7
 80059ae:	f7ff ffa5 	bl	80058fc <sbrk_aligned>
 80059b2:	3001      	adds	r0, #1
 80059b4:	d02b      	beq.n	8005a0e <_malloc_r+0xd2>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	442b      	add	r3, r5
 80059ba:	6023      	str	r3, [r4, #0]
 80059bc:	e00e      	b.n	80059dc <_malloc_r+0xa0>
 80059be:	6822      	ldr	r2, [r4, #0]
 80059c0:	1b52      	subs	r2, r2, r5
 80059c2:	d41e      	bmi.n	8005a02 <_malloc_r+0xc6>
 80059c4:	2a0b      	cmp	r2, #11
 80059c6:	d916      	bls.n	80059f6 <_malloc_r+0xba>
 80059c8:	1961      	adds	r1, r4, r5
 80059ca:	42a3      	cmp	r3, r4
 80059cc:	6025      	str	r5, [r4, #0]
 80059ce:	bf18      	it	ne
 80059d0:	6059      	strne	r1, [r3, #4]
 80059d2:	6863      	ldr	r3, [r4, #4]
 80059d4:	bf08      	it	eq
 80059d6:	6031      	streq	r1, [r6, #0]
 80059d8:	5162      	str	r2, [r4, r5]
 80059da:	604b      	str	r3, [r1, #4]
 80059dc:	4638      	mov	r0, r7
 80059de:	f104 060b 	add.w	r6, r4, #11
 80059e2:	f000 f8cf 	bl	8005b84 <__malloc_unlock>
 80059e6:	f026 0607 	bic.w	r6, r6, #7
 80059ea:	1d23      	adds	r3, r4, #4
 80059ec:	1af2      	subs	r2, r6, r3
 80059ee:	d0b6      	beq.n	800595e <_malloc_r+0x22>
 80059f0:	1b9b      	subs	r3, r3, r6
 80059f2:	50a3      	str	r3, [r4, r2]
 80059f4:	e7b3      	b.n	800595e <_malloc_r+0x22>
 80059f6:	6862      	ldr	r2, [r4, #4]
 80059f8:	42a3      	cmp	r3, r4
 80059fa:	bf0c      	ite	eq
 80059fc:	6032      	streq	r2, [r6, #0]
 80059fe:	605a      	strne	r2, [r3, #4]
 8005a00:	e7ec      	b.n	80059dc <_malloc_r+0xa0>
 8005a02:	4623      	mov	r3, r4
 8005a04:	6864      	ldr	r4, [r4, #4]
 8005a06:	e7b2      	b.n	800596e <_malloc_r+0x32>
 8005a08:	4634      	mov	r4, r6
 8005a0a:	6876      	ldr	r6, [r6, #4]
 8005a0c:	e7b9      	b.n	8005982 <_malloc_r+0x46>
 8005a0e:	230c      	movs	r3, #12
 8005a10:	603b      	str	r3, [r7, #0]
 8005a12:	4638      	mov	r0, r7
 8005a14:	f000 f8b6 	bl	8005b84 <__malloc_unlock>
 8005a18:	e7a1      	b.n	800595e <_malloc_r+0x22>
 8005a1a:	6025      	str	r5, [r4, #0]
 8005a1c:	e7de      	b.n	80059dc <_malloc_r+0xa0>
 8005a1e:	bf00      	nop
 8005a20:	200040d0 	.word	0x200040d0

08005a24 <_sbrk_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4d06      	ldr	r5, [pc, #24]	; (8005a40 <_sbrk_r+0x1c>)
 8005a28:	2300      	movs	r3, #0
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	4608      	mov	r0, r1
 8005a2e:	602b      	str	r3, [r5, #0]
 8005a30:	f7fb fbf8 	bl	8001224 <_sbrk>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d102      	bne.n	8005a3e <_sbrk_r+0x1a>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	b103      	cbz	r3, 8005a3e <_sbrk_r+0x1a>
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
 8005a40:	200040d8 	.word	0x200040d8

08005a44 <__sread>:
 8005a44:	b510      	push	{r4, lr}
 8005a46:	460c      	mov	r4, r1
 8005a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a4c:	f000 f8a0 	bl	8005b90 <_read_r>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	bfab      	itete	ge
 8005a54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a56:	89a3      	ldrhlt	r3, [r4, #12]
 8005a58:	181b      	addge	r3, r3, r0
 8005a5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a5e:	bfac      	ite	ge
 8005a60:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a62:	81a3      	strhlt	r3, [r4, #12]
 8005a64:	bd10      	pop	{r4, pc}

08005a66 <__swrite>:
 8005a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6a:	461f      	mov	r7, r3
 8005a6c:	898b      	ldrh	r3, [r1, #12]
 8005a6e:	05db      	lsls	r3, r3, #23
 8005a70:	4605      	mov	r5, r0
 8005a72:	460c      	mov	r4, r1
 8005a74:	4616      	mov	r6, r2
 8005a76:	d505      	bpl.n	8005a84 <__swrite+0x1e>
 8005a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f000 f868 	bl	8005b54 <_lseek_r>
 8005a84:	89a3      	ldrh	r3, [r4, #12]
 8005a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a8e:	81a3      	strh	r3, [r4, #12]
 8005a90:	4632      	mov	r2, r6
 8005a92:	463b      	mov	r3, r7
 8005a94:	4628      	mov	r0, r5
 8005a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9a:	f000 b817 	b.w	8005acc <_write_r>

08005a9e <__sseek>:
 8005a9e:	b510      	push	{r4, lr}
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa6:	f000 f855 	bl	8005b54 <_lseek_r>
 8005aaa:	1c43      	adds	r3, r0, #1
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	bf15      	itete	ne
 8005ab0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aba:	81a3      	strheq	r3, [r4, #12]
 8005abc:	bf18      	it	ne
 8005abe:	81a3      	strhne	r3, [r4, #12]
 8005ac0:	bd10      	pop	{r4, pc}

08005ac2 <__sclose>:
 8005ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac6:	f000 b813 	b.w	8005af0 <_close_r>
	...

08005acc <_write_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4d07      	ldr	r5, [pc, #28]	; (8005aec <_write_r+0x20>)
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	4608      	mov	r0, r1
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	602a      	str	r2, [r5, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	f7fb fb51 	bl	8001182 <_write>
 8005ae0:	1c43      	adds	r3, r0, #1
 8005ae2:	d102      	bne.n	8005aea <_write_r+0x1e>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	b103      	cbz	r3, 8005aea <_write_r+0x1e>
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
 8005aec:	200040d8 	.word	0x200040d8

08005af0 <_close_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	4d06      	ldr	r5, [pc, #24]	; (8005b0c <_close_r+0x1c>)
 8005af4:	2300      	movs	r3, #0
 8005af6:	4604      	mov	r4, r0
 8005af8:	4608      	mov	r0, r1
 8005afa:	602b      	str	r3, [r5, #0]
 8005afc:	f7fb fb5d 	bl	80011ba <_close>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_close_r+0x1a>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_close_r+0x1a>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	200040d8 	.word	0x200040d8

08005b10 <_fstat_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	4d07      	ldr	r5, [pc, #28]	; (8005b30 <_fstat_r+0x20>)
 8005b14:	2300      	movs	r3, #0
 8005b16:	4604      	mov	r4, r0
 8005b18:	4608      	mov	r0, r1
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	602b      	str	r3, [r5, #0]
 8005b1e:	f7fb fb58 	bl	80011d2 <_fstat>
 8005b22:	1c43      	adds	r3, r0, #1
 8005b24:	d102      	bne.n	8005b2c <_fstat_r+0x1c>
 8005b26:	682b      	ldr	r3, [r5, #0]
 8005b28:	b103      	cbz	r3, 8005b2c <_fstat_r+0x1c>
 8005b2a:	6023      	str	r3, [r4, #0]
 8005b2c:	bd38      	pop	{r3, r4, r5, pc}
 8005b2e:	bf00      	nop
 8005b30:	200040d8 	.word	0x200040d8

08005b34 <_isatty_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4d06      	ldr	r5, [pc, #24]	; (8005b50 <_isatty_r+0x1c>)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	602b      	str	r3, [r5, #0]
 8005b40:	f7fb fb57 	bl	80011f2 <_isatty>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d102      	bne.n	8005b4e <_isatty_r+0x1a>
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	b103      	cbz	r3, 8005b4e <_isatty_r+0x1a>
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	bd38      	pop	{r3, r4, r5, pc}
 8005b50:	200040d8 	.word	0x200040d8

08005b54 <_lseek_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4d07      	ldr	r5, [pc, #28]	; (8005b74 <_lseek_r+0x20>)
 8005b58:	4604      	mov	r4, r0
 8005b5a:	4608      	mov	r0, r1
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	2200      	movs	r2, #0
 8005b60:	602a      	str	r2, [r5, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f7fb fb50 	bl	8001208 <_lseek>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_lseek_r+0x1e>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_lseek_r+0x1e>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	200040d8 	.word	0x200040d8

08005b78 <__malloc_lock>:
 8005b78:	4801      	ldr	r0, [pc, #4]	; (8005b80 <__malloc_lock+0x8>)
 8005b7a:	f7ff be0b 	b.w	8005794 <__retarget_lock_acquire_recursive>
 8005b7e:	bf00      	nop
 8005b80:	200040cc 	.word	0x200040cc

08005b84 <__malloc_unlock>:
 8005b84:	4801      	ldr	r0, [pc, #4]	; (8005b8c <__malloc_unlock+0x8>)
 8005b86:	f7ff be06 	b.w	8005796 <__retarget_lock_release_recursive>
 8005b8a:	bf00      	nop
 8005b8c:	200040cc 	.word	0x200040cc

08005b90 <_read_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4d07      	ldr	r5, [pc, #28]	; (8005bb0 <_read_r+0x20>)
 8005b94:	4604      	mov	r4, r0
 8005b96:	4608      	mov	r0, r1
 8005b98:	4611      	mov	r1, r2
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	602a      	str	r2, [r5, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f7fb fad2 	bl	8001148 <_read>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d102      	bne.n	8005bae <_read_r+0x1e>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	b103      	cbz	r3, 8005bae <_read_r+0x1e>
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
 8005bb0:	200040d8 	.word	0x200040d8

08005bb4 <_init>:
 8005bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb6:	bf00      	nop
 8005bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bba:	bc08      	pop	{r3}
 8005bbc:	469e      	mov	lr, r3
 8005bbe:	4770      	bx	lr

08005bc0 <_fini>:
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	bf00      	nop
 8005bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc6:	bc08      	pop	{r3}
 8005bc8:	469e      	mov	lr, r3
 8005bca:	4770      	bx	lr
